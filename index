<!DOCTYPE html>
<html lang="es" class=""> <!-- La clase 'dark' se añadirá aquí con JS -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GETS POS - Sistema de Inventario</title>
    <!-- Carga de Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Carga de Font Awesome (para iconos) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Configuración de Tailwind para Modo Oscuro y Colores de Marca -->
    <script>
        tailwind.config = {
            darkMode: 'class', // Habilitar modo oscuro basado en la clase del <html>
            theme: {
                extend: {
                    colors: {
                        // Colores de la marca Gets
                        gets: {
                            'purple-dark': '#3a2d5e', // Color principal de la barra lateral (ejemplo)
                            'purple-light': '#5e4a8f', // Color para hover (ejemplo)
                            'orange': '#f37021',      // Color de acento (ejemplo)
                        },
                        // Colores adaptados para modo oscuro
                        dark: {
                            'bg': '#1e293b',    // Fondo principal (slate-800)
                            'card': '#334155',  // Fondo de tarjetas (slate-700)
                            'border': '#475569',// Bordes (slate-600)
                            'text': '#f1f5f9',   // Texto principal (slate-100)
                            'subtext': '#94a3b8' // Texto secundario (slate-400)
                        }
                    }
                }
            }
        }
    </script>
    
    <!-- Estilos Globales y de Impresión -->
    <style>
        /* Estilos para ocultar elementos al imprimir */
        @media print {
            /* Ocultar todo menos la factura */
            body > *:not(#invoice-modal-printable-area):not(#transfer-receipt-printable-area):not(#purchase-receipt-printable-area) {
                display: none !important;
            }

            /* Asegurarse de que el modal de factura/recibo ocupe todo */
            #invoice-modal-printable-area,
            #transfer-receipt-printable-area,
            #purchase-receipt-printable-area {
                display: block !important;
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 20px;
                background: white;
                color: black;
                border: none;
                box-shadow: none;
            }
            
            /* Ocultar botones dentro de los modales impresos */
            .no-print {
                display: none !important;
            }

            /* Evitar que el contenido se divida entre páginas si es posible */
            .printable-content {
                page-break-inside: avoid;
            }
            
            /* Resetear colores de modo oscuro al imprimir */
            .dark .printable-content {
                background-color: white !important;
                color: black !important;
            }
            .dark .printable-content * {
                background-color: transparent !important;
                color: black !important;
            }
        }

        /* Estilos para el botón de modo oscuro */
        #dark-mode-toggle {
            position: fixed;
            top: 0;
            right: 0;
            z-index: 1000;
            width: 3rem; /* w-12 */
            height: 3rem; /* h-12 */
            background-color: #4f46e5; /* indigo-600 */
            color: white;
            border-bottom-left-radius: 9999px; /* rounded-bl-full */
            box-shadow: -2px 2px 8px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            padding-left: 0.25rem; /* pl-1 */
            padding-top: 0.25rem; /* pt-1 */
            cursor: pointer;
            transition: background-color 0.2s;
        }
        #dark-mode-toggle:hover {
            background-color: #4338ca; /* indigo-700 */
        }
        /* Ajuste para modo oscuro */
        .dark #dark-mode-toggle {
            background-color: #fbbf24; /* amber-400 */
            color: #1e293b; /* slate-800 */
        }
        .dark #dark-mode-toggle:hover {
            background-color: #f59e0b; /* amber-500 */
        }

        /* Ocultar flechas en inputs de tipo 'number' */
        input[type=number]::-webkit-inner-spin-button, 
        input[type=number]::-webkit-outer-spin-button { 
          -webkit-appearance: none; 
          margin: 0; 
        }
        input[type=number] {
          -moz-appearance: textfield; /* Firefox */
        }

    </style>
</head>
<body class="bg-gray-100 dark:bg-dark-bg dark:text-dark-text font-sans">

    <!-- Botón de Modo Oscuro -->
    <button id="dark-mode-toggle" title="Cambiar modo">
        <i id="dark-mode-icon" class="fas fa-moon text-lg"></i>
    </button>

    <!-- 1. Pantalla de Inicio de Sesión -->
    <div id="login-screen" class="flex items-center justify-center min-h-screen bg-gray-900">
        <div class="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-xl m-4">
            <img 
                src="https://appgets.solutions/img/logoempresa.png" 
                alt="Logo GETS Solutions" 
                class="w-48 mx-auto"
            >
            <h2 class="text-2xl font-bold text-center text-gray-900">
                Bienvenido a GETS POS
            </h2>
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="login-username" class="block text-sm font-medium text-gray-700">Usuario</label>
                    <input id="login-username" name="username" type="text" required
                        class="w-full px-3 py-2 mt-1 text-gray-900 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="login-password" class="block text-sm font-medium text-gray-700">Contraseña</label>
                    <input id="login-password" name="password" type="password" required
                        class="w-full px-3 py-2 mt-1 text-gray-900 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <button type="submit"
                        class="w-full py-2 px-4 font-semibold text-white bg-indigo-900 rounded-md shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors duration-200">
                        Ingresar
                    </button>
                </div>
                <p id="login-error" class="text-sm text-red-600 text-center hidden"></p>
            </form>
        </div>
    </div>

    <!-- 2. Contenedor Principal de la Aplicación (Oculto por defecto) -->
    <div id="app-container" class="hidden h-screen flex">
        
        <!-- Panel Lateral (Sidebar) -->
        <nav id="sidebar" class="w-64 bg-indigo-900 text-white flex flex-col shadow-lg">
            <!-- Logo -->
            <div class="py-6 px-4 text-center">
                <img src="https://appgets.solutions/img/logoempresa.png" alt="Logo GETS" class="w-36 mx-auto mb-2">
                <span class="text-2xl font-bold text-white tracking-wider">POS</span>
            </div>
            
            <!-- Menú de Navegación -->
            <ul class="flex-1 px-4 py-2 space-y-2">
                <!-- Dashboard (Admin) -->
                <li class="admin-only">
                    <button data-view="dashboard" class="nav-button w-full text-left flex items-center px-4 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
                        <i class="fas fa-chart-pie w-6 text-center text-lg mr-3"></i>
                        <span class="font-medium">Dashboard</span>
                    </button>
                </li>
                <!-- Inventario (Admin) -->
                <li class="admin-only">
                    <button data-view="inventory" class="nav-button w-full text-left flex items-center px-4 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
                        <i class="fas fa-boxes w-6 text-center text-lg mr-3"></i>
                        <span class="font-medium">Inventario</span>
                    </button>
                </li>
                <!-- Compras (Admin) -->
                <li class="admin-only">
                    <button data-view="purchases" class="nav-button w-full text-left flex items-center px-4 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
                        <i class="fas fa-truck-loading w-6 text-center text-lg mr-3"></i>
                        <span class="font-medium">Compras</span>
                    </button>
                </li>
                <!-- Ventas (Todos) -->
                <li>
                    <button data-view="sales" class="nav-button w-full text-left flex items-center px-4 py-3 rounded-lg hover:bg-indigo-700 transition-colors">
                        <i class="fas fa-cash-register w-6 text-center text-lg mr-3"></i>
                        <span class="font-medium">Ventas</span>
                    </button>
                </li>
            </ul>
            
            <!-- Info de Usuario y Salir -->
            <div class="p-4 border-t border-indigo-700">
                <div class="text-center mb-3">
                    <span id="app-user" class="block font-semibold text-lg capitalize"></span>
                    <span id="app-role" class="block text-sm text-indigo-300 capitalize"></span>
                </div>
                <button id="logout-button" class="w-full flex items-center justify-center py-2 px-4 rounded-lg bg-red-600 hover:bg-red-700 transition-colors">
                    <i class="fas fa-sign-out-alt mr-2"></i>
                    <span>Cambiar Usuario</span>
                </button>
            </div>
        </nav>

        <!-- Área de Contenido Principal -->
        <main class="flex-1 flex flex-col h-screen">
            <div class="flex-1 p-6 lg:p-8 overflow-y-auto">

                <!-- 
                  VISTAS DE CONTENIDO (se muestra una a la vez)
                -->

                <!-- Vista: Dashboard (Admin) -->
                <div id="view-dashboard" class="app-view hidden">
                    <h1 class="text-3xl font-bold mb-6 text-gray-800 dark:text-white">Dashboard</h1>
                    
                    <!-- Inventario por Bodega -->
                    <div class="bg-white dark:bg-dark-card p-6 rounded-lg shadow-lg mb-8">
                        <h2 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-100">Inventario por Bodega</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full min-w-max text-left">
                                <thead class="border-b dark:border-dark-border">
                                    <tr>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                                        <!-- Columnas de bodegas se generan dinámicamente -->
                                        <th id="warehouse-header-template" class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center hidden"></th>
                                    </tr>
                                </thead>
                                <tbody id="dashboard-stock-list" class="divide-y dark:divide-dark-border">
                                    <!-- Filas se generan dinámicamente -->
                                </tbody>
                            </table>
                            <p id="dashboard-loading" class="text-center text-gray-500 py-4">Cargando inventario...</p>
                        </div>
                    </div>

                    <!-- Historial de Traslados -->
                    <div class="bg-white dark:bg-dark-card p-6 rounded-lg shadow-lg">
                        <div class="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                            <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-100">Historial de Traslados</h2>
                            <div class="relative">
                                <span class="absolute left-3 top-2.5 text-gray-400">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="transfer-search" placeholder="Buscar traslado..."
                                    class="w-full md:w-64 pl-10 pr-4 py-2 rounded-lg border dark:border-dark-border bg-white dark:bg-dark-bg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full min-w-max text-left">
                                <thead class="border-b dark:border-dark-border">
                                    <tr>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Fecha</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Cant.</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Desde</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Hasta</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Usuario</th>
                                    </tr>
                                </thead>
                                <tbody id="transfer-history-list" class="divide-y dark:divide-dark-border">
                                    <!-- Filas se generan dinámicamente -->
                                </tbody>
                            </table>
                            <p id="transfer-loading" class="text-center text-gray-500 py-4">Cargando traslados...</p>
                        </div>
                    </div>
                </div>
                
                <!-- Vista: Inventario (Admin) -->
                <div id="view-inventory" class="app-view hidden">
                    <!-- Cabecera y Buscador -->
                    <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                        <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Inventario General</h1>
                        <div class="flex items-center gap-4 w-full md:w-auto">
                            <div class="relative flex-1 md:flex-none">
                                <span class="absolute left-3 top-2.5 text-gray-400">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="product-search" placeholder="Buscar producto..."
                                    class="w-full md:w-64 pl-10 pr-4 py-2 rounded-lg border dark:border-dark-border bg-white dark:bg-dark-card focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <button id="open-add-product-modal"
                                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow flex items-center whitespace-nowrap">
                                <i class="fas fa-plus-circle mr-2"></i>
                                Añadir Producto
                            </button>
                        </div>
                    </div>
                    
                    <!-- Tabla de Inventario -->
                    <div class="bg-white dark:bg-dark-card rounded-lg shadow-lg overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="w-full min-w-max text-left">
                                <thead class="border-b dark:border-dark-border bg-gray-50 dark:bg-gray-800">
                                    <tr>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Stock Total</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Costo/U</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Precio Venta</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Valor Inventario</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody id="inventory-list" class="divide-y dark:divide-dark-border">
                                    <!-- Fila de Carga -->
                                    <tr id="inventory-loading-row">
                                        <td colspan="6" class="text-center text-gray-500 py-6">
                                            <i class="fas fa-spinner fa-spin mr-2"></i>Cargando inventario...
                                        </td>
                                    </tr>
                                    <!-- Filas se generan dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Vista: Compras (Admin) -->
                <div id="view-purchases" class="app-view hidden">
                    <!-- Cabecera -->
                    <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                        <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Gestión de Compras</h1>
                        <button id="open-purchase-modal"
                            class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-5 rounded-lg shadow flex items-center">
                            <i class="fas fa-plus-circle mr-2"></i>
                            Iniciar Nueva Compra
                        </button>
                    </div>

                    <!-- Historial de Compras -->
                    <div class="bg-white dark:bg-dark-card p-6 rounded-lg shadow-lg">
                        <div class="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                            <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-100">Historial de Compras</h2>
                            <div class="relative">
                                <span class="absolute left-3 top-2.5 text-gray-400">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="purchase-search" placeholder="Buscar por proveedor o ID..."
                                    class="w-full md:w-64 pl-10 pr-4 py-2 rounded-lg border dark:border-dark-border bg-white dark:bg-dark-bg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full min-w-max text-left">
                                <thead class="border-b dark:border-dark-border">
                                    <tr>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Fecha</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Proveedor</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Bodega</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Usuario</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Recibo</th>
                                    </tr>
                                </thead>
                                <tbody id="purchase-history-list" class="divide-y dark:divide-dark-border">
                                    <!-- Filas se generan dinámicamente -->
                                </tbody>
                            </table>
                            <p id="purchase-loading" class="text-center text-gray-500 py-4">Cargando historial de compras...</p>
                        </div>
                    </div>
                </div>
                
                <!-- Vista: Ventas (Todos) -->
                <div id="view-sales" class="app-view hidden">
                    <!-- Cabecera -->
                    <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
                        <h1 class="text-3xl font-bold text-gray-800 dark:text-white">Gestión de Ventas</h1>
                        <button id="open-sale-modal"
                            class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-5 rounded-lg shadow flex items-center">
                            <i class="fas fa-plus-circle mr-2"></i>
                            Iniciar Nueva Venta
                        </button>
                    </div>

                    <!-- Historial de Ventas -->
                    <div class="bg-white dark:bg-dark-card p-6 rounded-lg shadow-lg">
                        <div class="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                            <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-100">Historial de Ventas</h2>
                            <div class="relative">
                                <span class="absolute left-3 top-2.5 text-gray-400">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="sales-search" placeholder="Buscar por cliente o N°..."
                                    class="w-full md:w-64 pl-10 pr-4 py-2 rounded-lg border dark:border-dark-border bg-white dark:bg-dark-bg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="w-full min-w-max text-left">
                                <thead class="border-b dark:border-dark-border">
                                    <tr>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Fecha</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Factura N°</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Cliente</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Ganancia</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Vendedor</th>
                                        <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Factura</th>
                                    </tr>
                                </thead>
                                <tbody id="sales-history-list" class="divide-y dark:divide-dark-border">
                                    <!-- Filas se generan dinámicamente -->
                                </tbody>
                            </table>
                            <p id="sales-loading" class="text-center text-gray-500 py-4">Cargando historial de ventas...</p>
                        </div>
                    </div>
                </div>

            </div>
        </main>

    </div> <!-- Fin de App Container -->


    <!-- 
      MODALES DE LA APLICACIÓN
      (Usan un fondo oscuro 'backdrop')
    -->
    <div id="modal-backdrop" class="hidden fixed inset-0 bg-black bg-opacity-60 z-40"></div>

    <!-- Modal: Notificación (Reemplazo de Alert) -->
    <div id="alert-modal" class="hidden fixed inset-0 z-[70] flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-sm overflow-hidden">
            <div class="p-6 text-center">
                <i id="alert-modal-icon" class="fas fa-info-circle text-5xl text-blue-500 mb-4"></i>
                <h3 id="alert-modal-title" class="text-xl font-semibold text-gray-800 dark:text-white mb-2">Notificación</h3>
                <p id="alert-modal-text" class="text-gray-600 dark:text-gray-300 mb-6"></p>
                <div class="flex justify-center">
                    <button id="alert-modal-close"
                        class="py-2 px-8 rounded-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                        Entendido
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal: Añadir Nuevo Producto -->
    <div id="add-product-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-md overflow-hidden">
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Añadir Nuevo Producto</h3>
                <button id="add-product-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>
            <form id="add-item-form" class="p-6 space-y-4">
                <div>
                    <label for="productName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre del Producto</label>
                    <input type="text" id="productName" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <!-- Stock inicial se maneja en Compras. Se crea con stock 0. -->
                <div>
                    <label for="productCost" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Costo / Unidad (COP)</label>
                    <input type="number" id="productCost" min="0" value="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div>
                    <label for="productPrice" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Precio Venta (COP)</label>
                    <input type="number" id="productPrice" min="0" value="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div class="flex justify-end pt-4">
                    <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded-lg shadow">
                        Guardar Producto
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal: Editar Producto -->
    <div id="edit-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-md overflow-hidden">
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Editar Producto</h3>
                <button id="edit-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>
            <form id="edit-modal-form" class="p-6 space-y-4">
                <input type="hidden" id="edit-product-id">
                <div>
                    <label for="edit-product-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre del Producto</label>
                    <input type="text" id="edit-product-name" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div>
                    <label for="edit-product-cost" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Costo / Unidad (COP)</label>
                    <input type="number" id="edit-product-cost" min="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div>
                    <label for="edit-product-price" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Precio Venta (COP)</label>
                    <input type="number" id="edit-product-price" min="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div class="flex justify-end pt-4">
                    <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-6 rounded-lg shadow">
                        Guardar Cambios
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal: Trasladar Inventario -->
    <div id="transfer-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-xl overflow-hidden">
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Trasladar Producto</h3>
                <button id="transfer-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>
            <form id="transfer-modal-form" class="p-6">
                <input type="hidden" id="transfer-product-id">
                <h4 id="transfer-product-name" class="text-lg font-medium text-center mb-4 dark:text-gray-100"></h4>
                
                <!-- Stock Actual por Bodega -->
                <div class="mb-4">
                    <h5 class="font-semibold mb-2 dark:text-gray-200">Stock Actual:</h5>
                    <div id="transfer-stock-list" class="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                        <!-- Se llena dinámicamente -->
                    </div>
                </div>
                
                <!-- Formulario de Traslado -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div>
                        <label for="transfer-from-warehouse" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Desde (Origen)</label>
                        <select id="transfer-from-warehouse" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <!-- Opciones se llenan dinámicamente -->
                        </select>
                    </div>
                    <div>
                        <label for="transfer-to-warehouse" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hasta (Destino)</label>
                        <select id="transfer-to-warehouse" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <!-- Opciones se llenan dinámicamente -->
                        </select>
                    </div>
                    <div>
                        <label for="transfer-quantity" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Cantidad</label>
                        <input type="number" id="transfer-quantity" min="1" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    </div>
                </div>
                
                <div class="flex justify-end pt-6 mt-4 border-t dark:border-dark-border">
                    <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg shadow">
                        Confirmar Traslado
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal: Iniciar Nueva Venta (Punto de Venta) -->
    <div id="sale-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <!-- Contenido del modal, w-full max-w-4xl para hacerlo más ancho -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-5xl h-[90vh] flex flex-col overflow-hidden">
            <!-- Encabezado -->
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    <i class="fas fa-cash-register mr-2"></i>Punto de Venta
                </h3>
                <button id="sale-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>

            <!-- Formulario principal de Venta -->
            <form id="sale-form" class="flex-1 flex flex-col lg:flex-row overflow-hidden">
                
                <!-- Columna Izquierda: Cliente y Buscador -->
                <div class="w-full lg:w-1/3 p-6 border-r dark:border-dark-border overflow-y-auto">
                    <!-- Datos del Cliente -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Datos del Cliente</h4>
                        <div class="space-y-3">
                            <div>
                                <label for="sale-customer-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre Cliente*</label>
                                <input type="text" id="sale-customer-name" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <div>
                                <label for="sale-customer-id" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Cédula / ID / NIT*</label>
                                <input type="text" id="sale-customer-id" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <div>
                                <label for="sale-customer-phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Teléfono</label>
                                <input type="tel" id="sale-customer-phone" class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <div>
                                <label for="sale-customer-email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Correo Electrónico</label>
                                <input type="email" id="sale-customer-email" class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Buscador de Productos -->
                    <div class="sticky top-0 bg-white dark:bg-dark-card pt-2">
                        <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Buscar Producto</h4>
                        <div class="relative">
                            <span class="absolute left-3 top-2.5 text-gray-400"><i class="fas fa-search"></i></span>
                            <input type="text" id="sale-search-product" placeholder="Escriba para buscar..."
                                class="w-full pl-10 pr-4 py-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <!-- Resultados de Búsqueda -->
                            <ul id="sale-search-results"
                                class="absolute z-10 w-full mt-1 bg-white dark:bg-dark-bg border dark:border-dark-border rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                                <!-- Resultados dinámicos -->
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Columna Derecha: Carrito y Totales -->
                <div class="w-full lg:w-2/3 p-6 flex flex-col overflow-hidden">
                    <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Carrito de Venta</h4>
                    <!-- Tabla del Carrito -->
                    <div class="flex-1 overflow-y-auto border rounded-lg dark:border-dark-border">
                        <table class="w-full min-w-max text-left">
                            <thead class="bg-gray-50 dark:bg-gray-800 sticky top-0">
                                <tr>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Precio/U</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Cantidad</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center w-16"></th>
                                </tr>
                            </thead>
                            <tbody id="sale-cart-body" class="divide-y dark:divide-dark-border">
                                <tr>
                                    <td colspan="5" class="text-center text-gray-500 py-6">El carrito está vacío</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Totales -->
                    <div class="pt-6 mt-4 border-t dark:border-dark-border">
                        <div class="flex justify-end items-center gap-6">
                            <div class="space-y-2 text-right">
                                <div class="text-lg font-medium text-gray-600 dark:text-gray-300">Subtotal:</div>
                                <div class="text-lg font-medium text-gray-600 dark:text-gray-300">Descuento (COP):</div>
                                <div class="text-2xl font-bold text-gray-900 dark:text-white">Total Final:</div>
                            </div>
                            <div class="space-y-2 text-right">
                                <div id="sale-subtotal" class="text-lg font-medium text-gray-800 dark:text-gray-100"></div>
                                <div>
                                    <input type="number" id="sale-discount" value="0" min="0"
                                        class="w-36 p-1 text-right border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                </div>
                                <div id="sale-total" class="text-2xl font-bold text-green-600 dark:text-green-500"></div>
                            </div>
                        </div>
                        <div class="flex justify-end mt-6">
                            <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg shadow text-lg">
                                <i class="fas fa-check-circle mr-2"></i>
                                Confirmar Venta
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal: Iniciar Nueva Compra -->
    <div id="purchase-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <!-- Contenido del modal, w-full max-w-5xl -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-5xl h-[90vh] flex flex-col overflow-hidden">
            <!-- Encabezado -->
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">
                    <i class="fas fa-truck-loading mr-2"></i>Iniciar Nueva Compra
                </h3>
                <button id="purchase-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>

            <!-- Formulario principal de Compra -->
            <form id="purchase-form" class="flex-1 flex flex-col lg:flex-row overflow-hidden">
                
                <!-- Columna Izquierda: Proveedor, Bodega y Buscador -->
                <div class="w-full lg:w-1/3 p-6 border-r dark:border-dark-border overflow-y-auto">
                    <!-- Datos del Proveedor -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Datos del Proveedor</h4>
                        <div class="space-y-3">
                            <div>
                                <label for="purchase-supplier-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre Proveedor*</label>
                                <input type="text" id="purchase-supplier-name" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <div>
                                <label for="purchase-supplier-id" class="block text-sm font-medium text-gray-700 dark:text-gray-300">ID / NIT*</label>
                                <input type="text" id="purchase-supplier-id" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Bodega de Destino -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Bodega de Destino</h4>
                        <select id="purchase-warehouse-target" required class="w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <!-- Se llena dinámicamente -->
                        </select>
                    </div>

                    <!-- Buscador de Productos -->
                    <div class="sticky top-0 bg-white dark:bg-dark-card pt-2">
                        <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Buscar Producto</h4>
                        <div class="relative">
                            <span class="absolute left-3 top-2.5 text-gray-400"><i class="fas fa-search"></i></span>
                            <input type="text" id="purchase-search-product" placeholder="Escriba para buscar..."
                                class="w-full pl-10 pr-4 py-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                            <!-- Resultados de Búsqueda -->
                            <ul id="purchase-search-results"
                                class="absolute z-10 w-full mt-1 bg-white dark:bg-dark-bg border dark:border-dark-border rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                                <!-- Resultados dinámicos -->
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Columna Derecha: Carrito de Compra y Totales -->
                <div class="w-full lg:w-2/3 p-6 flex flex-col overflow-hidden">
                    <h4 class="text-lg font-semibold mb-3 dark:text-gray-100">Carrito de Compra</h4>
                    <!-- Tabla del Carrito -->
                    <div class="flex-1 overflow-y-auto border rounded-lg dark:border-dark-border">
                        <table class="w-full min-w-max text-left">
                            <thead class="bg-gray-50 dark:bg-gray-800 sticky top-0">
                                <tr>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Costo/U</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center">Cantidad</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                                    <th class="py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center w-16"></th>
                                </tr>
                            </thead>
                            <tbody id="purchase-cart-body" class="divide-y dark:divide-dark-border">
                                <tr>
                                    <td colspan="5" class="text-center text-gray-500 py-6">El carrito está vacío</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Totales -->
                    <div class="pt-6 mt-4 border-t dark:border-dark-border">
                        <div class="flex justify-end items-center gap-6">
                            <div class="text-2xl font-bold text-gray-900 dark:text-white">Total Compra:</div>
                            <div id="purchase-total" class="text-2xl font-bold text-blue-600 dark:text-blue-500"></div>
                        </div>
                        <div class="flex justify-end mt-6">
                            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg shadow text-lg">
                                <i class="fas fa-check-circle mr-2"></i>
                                Confirmar Compra
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal: Creación Rápida de Producto (en Compra) -->
    <div id="quick-add-product-modal" class="hidden fixed inset-0 z-[60] flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-md overflow-hidden">
            <div class="flex justify-between items-center p-5 bg-gray-100 dark:bg-gray-800 border-b dark:border-dark-border">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white">Crear Nuevo Producto</h3>
                <button id="quick-add-modal-close" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 text-2xl">&times;</button>
            </div>
            <form id="quick-add-form" class="p-6 space-y-4">
                <div>
                    <label for="quick-product-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre del Producto</label>
                    <input type="text" id="quick-product-name" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div>
                    <label for="quick-product-cost" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Costo / Unidad (COP)</label>
                    <input type="number" id="quick-product-cost" min="0" value="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div>
                    <label for="quick-product-price" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Precio Venta (COP)</label>
                    <input type="number" id="quick-product-price" min="0" value="0" required class="mt-1 w-full p-2 border rounded-md dark:bg-dark-bg dark:border-dark-border focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div class="flex justify-end pt-4">
                    <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg shadow">
                        Guardar y Añadir
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal: Confirmar Eliminación -->
    <div id="confirm-modal" class="hidden fixed inset-0 z-[60] flex items-center justify-center p-4">
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-sm overflow-hidden">
            <div class="p-6 text-center">
                <i class="fas fa-exclamation-triangle text-5xl text-red-500 mb-4"></i>
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">¿Está seguro?</h3>
                <p id="confirm-modal-text" class="text-gray-600 dark:text-gray-300 mb-6"></p>
                <div class="flex justify-center gap-4">
                    <button id="confirm-modal-cancel"
                        class="py-2 px-6 rounded-lg font-medium bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500">
                        Cancelar
                    </button>
                    <button id="confirm-modal-confirm"
                        class="py-2 px-6 rounded-lg font-medium text-white bg-red-600 hover:bg-red-700">
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal: Factura de Venta (para imprimir) -->
    <div id="invoice-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <!-- Contenido del modal -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-3xl h-[90vh] flex flex-col overflow-hidden">
            
            <!-- Contenido imprimible con scroll -->
            <div id="invoice-modal-printable-area" class="flex-1 overflow-y-auto p-8 printable-content">
                <!-- Encabezado Factura -->
                <div class="flex justify-between items-start mb-8">
                    <div>
                        <img src="https://appgets.solutions/img/logoempresa.png" alt="Logo GETS" class="w-40">
                        <span class="text-lg font-bold text-gray-800 dark:text-gray-100">GETS POS</span>
                    </div>
                    <div class="text-right">
                        <h2 class="text-3xl font-bold uppercase text-gray-800 dark:text-white">Factura</h2>
                        <p class="text-gray-600 dark:text-gray-400"><strong>N° Factura:</strong> <span id="invoice-id"></span></p>
                        <p class="text-gray-600 dark:text-gray-400"><strong>Fecha:</strong> <span id="invoice-date"></span></p>
                    </div>
                </div>

                <!-- Datos del Cliente -->
                <div class="mb-8 p-4 border rounded-lg dark:border-dark-border">
                    <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-gray-200">Facturar a:</h3>
                    <p id="invoice-customer-name" class="font-bold text-gray-800 dark:text-white"></p>
                    <p id="invoice-customer-id" class="text-gray-600 dark:text-gray-400"></p>
                    <p id="invoice-customer-phone" class="text-gray-600 dark:text-gray-400"></p>
                    <p id="invoice-customer-email" class="text-gray-600 dark:text-gray-400"></p>
                </div>
                
                <!-- Tabla de Productos -->
                <table class="w-full text-left mb-8">
                    <thead class="border-b-2 dark:border-dark-border">
                        <tr>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-right">Precio/U</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-center">Cant.</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                        </tr>
                    </thead>
                    <tbody id="invoice-items-body" class="divide-y dark:divide-gray-200 dark:divide-dark-border">
                        <!-- Items de la factura -->
                    </tbody>
                </table>
                
                <!-- Totales Factura -->
                <div class="flex justify-end mb-8">
                    <div class="w-full max-w-xs space-y-2">
                        <div class="flex justify-between">
                            <span class="font-medium text-gray-600 dark:text-gray-300">Subtotal:</span>
                            <span id="invoice-subtotal" class="font-medium text-gray-800 dark:text-white"></span>
                        </div>
                        <div class="flex justify-between">
                            <span class="font-medium text-gray-600 dark:text-gray-300">Descuento:</span>
                            <span id="invoice-discount" class="font-medium text-gray-800 dark:text-white"></span>
                        </div>
                        <div class="flex justify-between border-t-2 dark:border-dark-border pt-2 mt-2">
                            <span class="text-xl font-bold text-gray-900 dark:text-white">Total Final:</span>
                            <span id="invoice-total" class="text-xl font-bold text-gray-900 dark:text-white"></span>
                        </div>
                    </div>
                </div>

                <p class="text-center text-xs text-gray-500 dark:text-gray-400">Vendido por: <span id="invoice-seller"></span></p>
                <p class="text-center text-xs text-gray-500 dark:text-gray-400 mt-1">¡Gracias por su compra!</p>
            </div>

            <!-- Botones (No imprimir) -->
            <div class="flex justify-end gap-4 p-5 bg-gray-100 dark:bg-gray-800 border-t dark:border-dark-border no-print">
                <button id="invoice-modal-close" class="py-2 px-6 rounded-lg font-medium bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500">
                    Cerrar
                </button>
                <button id="invoice-print-button" class="py-2 px-6 rounded-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                    <i class="fas fa-print mr-2"></i>Imprimir
                </button>
            </div>
        </div>
    </div>

    <!-- Modal: Recibo de Traslado (para imprimir) -->
    <div id="transfer-receipt-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <!-- Contenido del modal -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-lg h-[90vh] flex flex-col overflow-hidden">
            
            <!-- Contenido imprimible con scroll -->
            <div id="transfer-receipt-printable-area" class="flex-1 overflow-y-auto p-8 printable-content">
                <!-- Encabezado Recibo -->
                <div class="flex justify-between items-start mb-8">
                    <div>
                        <img src="https://appgets.solutions/img/logoempresa.png" alt="Logo GETS" class="w-40">
                        <span class="text-lg font-bold text-gray-800 dark:text-gray-100">GETS POS</span>
                    </div>
                    <div class="text-right">
                        <h2 class="text-3xl font-bold uppercase text-gray-800 dark:text-white">Recibo de Traslado</h2>
                        <p class="text-gray-600 dark:text-gray-400"><strong>N° Recibo:</strong> <span id="receipt-transfer-id"></span></p>
                        <p class="text-gray-600 dark:text-gray-400"><strong>Fecha:</strong> <span id="receipt-transfer-date"></span></p>
                    </div>
                </div>

                <!-- Detalles del Traslado -->
                <div class="mb-8 p-4 border rounded-lg dark:border-dark-border space-y-3">
                    <h3 class="text-lg font-semibold mb-3 text-gray-700 dark:text-gray-200">Detalles del Traslado:</h3>
                    <div>
                        <strong class="text-gray-600 dark:text-gray-400">Producto:</strong>
                        <p id="receipt-transfer-product" class="font-bold text-lg text-gray-800 dark:text-white"></p>
                    </div>
                    <div>
                        <strong class="text-gray-600 dark:text-gray-400">Cantidad:</strong>
                        <p id="receipt-transfer-quantity" class="font-bold text-lg text-gray-800 dark:text-white"></p>
                    </div>
                    <div>
                        <strong class="text-gray-600 dark:text-gray-400">Desde (Bodega Origen):</strong>
                        <p id="receipt-transfer-from" class="font-medium text-gray-800 dark:text-white"></p>
                    </div>
                    <div>
                        <strong class="text-gray-600 dark:text-gray-400">Hasta (Bodega Destino):</strong>
                        <p id="receipt-transfer-to" class="font-medium text-gray-800 dark:text-white"></p>
                    </div>
                </div>
                
                <p class="text-center text-sm text-gray-500 dark:text-gray-400 mt-8">Realizado por: <span id="receipt-transfer-user"></span></p>
                
                <!-- Firmas -->
                <div class="grid grid-cols-2 gap-8 mt-20 pt-8 border-t dark:border-dark-border">
                    <div class="text-center">
                        <div class="border-b w-full pb-2 border-gray-400"></div>
                        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Firma (Entrega)</p>
                    </div>
                    <div class="text-center">
                        <div class="border-b w-full pb-2 border-gray-400"></div>
                        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">Firma (Recibe)</p>
                    </div>
                </div>
            </div>

            <!-- Botones (No imprimir) -->
            <div class="flex justify-end gap-4 p-5 bg-gray-100 dark:bg-gray-800 border-t dark:border-dark-border no-print">
                <button id="transfer-receipt-modal-close" class="py-2 px-6 rounded-lg font-medium bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500">
                    Cerrar
                </button>
                <button id="transfer-receipt-print-button" class="py-2 px-6 rounded-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                    <i class="fas fa-print mr-2"></i>Imprimir
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modal: Recibo de Compra (para imprimir) -->
    <div id="purchase-receipt-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <!-- Contenido del modal -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow-2xl w-full max-w-3xl h-[90vh] flex flex-col overflow-hidden">
            
            <!-- Contenido imprimible con scroll -->
            <div id="purchase-receipt-printable-area" class="flex-1 overflow-y-auto p-8 printable-content">
                <!-- Encabezado Recibo -->
                <div class="flex justify-between items-start mb-8">
                    <div>
                        <img src="https://appgets.solutions/img/logoempresa.png" alt="Logo GETS" class="w-40">
                        <span class="text-lg font-bold text-gray-800 dark:text-gray-100">GETS POS</span>
                    </div>
                    <div class="text-right">
                        <h2 class="text-3xl font-bold uppercase text-gray-800 dark:text-white">Recibo de Compra</h2>
                        <p class="text-gray-600 dark:text-gray-400"><strong>N° Recibo:</strong> <span id="receipt-purchase-id"></span></p>
                        <p class="text-gray-600 dark:text-gray-400"><strong>Fecha:</strong> <span id="receipt-purchase-date"></span></p>
                    </div>
                </div>

                <!-- Datos del Proveedor y Bodega -->
                <div class="grid grid-cols-2 gap-8 mb-8">
                    <div class="p-4 border rounded-lg dark:border-dark-border">
                        <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-gray-200">Proveedor:</h3>
                        <p id="receipt-purchase-supplier-name" class="font-bold text-gray-800 dark:text-white"></p>
                        <p id="receipt-purchase-supplier-id" class="text-gray-600 dark:text-gray-400"></p>
                    </div>
                    <div class="p-4 border rounded-lg dark:border-dark-border">
                        <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-gray-200">Bodega de Destino:</h3>
                        <p id="receipt-purchase-warehouse" class="font-bold text-gray-800 dark:text-white"></p>
                    </div>
                </div>
                
                <!-- Tabla de Productos -->
                <table class="w-full text-left mb-8">
                    <thead class="border-b-2 dark:border-dark-border">
                        <tr>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300">Producto</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-right">Costo/U</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-center">Cant.</th>
                            <th class="py-3 px-2 font-semibold text-gray-600 dark:text-gray-300 text-right">Total</th>
                        </tr>
                    </thead>
                    <tbody id="receipt-purchase-items-body" class="divide-y dark:divide-gray-200 dark:divide-dark-border">
                        <!-- Items del recibo -->
                    </tbody>
                </table>
                
                <!-- Totales Recibo -->
                <div class="flex justify-end mb-8">
                    <div class="w-full max-w-xs space-y-2">
                        <div class="flex justify-between border-t-2 dark:border-dark-border pt-2 mt-2">
                            <span class="text-xl font-bold text-gray-900 dark:text-white">Total Compra:</span>
                            <span id="receipt-purchase-total" class="text-xl font-bold text-gray-900 dark:text-white"></span>
                        </div>
                    </div>
                </div>

                <p class="text-center text-xs text-gray-500 dark:text-gray-400">Recibido por: <span id="receipt-purchase-user"></span></p>
                <p class="text-center text-xs text-gray-500 dark:text-gray-400 mt-1">Recibo generado por GETS POS</p>
            </div>

            <!-- Botones (No imprimir) -->
            <div class="flex justify-end gap-4 p-5 bg-gray-100 dark:bg-gray-800 border-t dark:border-dark-border no-print">
                <button id="purchase-receipt-modal-close" class="py-2 px-6 rounded-lg font-medium bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500">
                    Cerrar
                </button>
                <button id="purchase-receipt-print-button" class="py-2 px-6 rounded-lg font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                    <i class="fas fa-print mr-2"></i>Imprimir
                </button>
            </div>
        </div>
    </div>


    <!-- ============================================= -->
    <!--          SCRIPT DE LA APLICACIÓN              -->
    <!-- ============================================= -->

    <!-- Carga de Firebase -->
    <script type="module">
        // --- Configuración de Firebase ---
        // Estas variables se proporcionan en el entorno de ejecución
        const firebaseConfig = typeof __firebase_config !== 'undefined' 
            ? JSON.parse(__firebase_config) 
            : {
                apiKey: "TU_API_KEY", // Reemplaza si pruebas localmente
                authDomain: "TU_AUTH_DOMAIN",
                projectId: "TU_PROJECT_ID",
                storageBucket: "TU_STORAGE_BUCKET",
                messagingSenderId: "TU_MESSAGING_SENDER_ID",
                appId: "TU_APP_ID"
            };

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        
        // --- Importaciones de Firebase ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            signInAnonymously, 
            signInWithCustomToken, 
            onAuthStateChanged,
            signOut
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            collection, 
            addDoc, 
            getDocs, 
            updateDoc, 
            deleteDoc, 
            onSnapshot, 
            query, 
            where,
            writeBatch,
            setDoc,
            getDoc,
            setLogLevel
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Inicialización de Firebase ---
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        // setLogLevel('debug'); // Descomenta para ver logs detallados de Firestore

        // --- Variables Globales de la App ---
        let currentUserId = null;
        let currentUserRole = null;
        let currentUsername = null;
        
        // Rutas de la Base de Datos
        let inventoryCollectionPath, salesCollectionPath, warehousesCollectionPath, 
            transfersCollectionPath, purchasesCollectionPath;

        // Listeners (para detenerlos al salir)
        let inventoryUnsubscribe = null;
        let salesUnsubscribe = null;
        let warehousesUnsubscribe = null;
        let transfersUnsubscribe = null;
        let purchasesUnsubscribe = null;

        // Cachés locales de datos
        let fullInventoryList = []; // Inventario completo
        let warehouseList = []; // Lista de bodegas
        
        // Formateador de moneda colombiana
        const formatter = new Intl.NumberFormat('es-CO', {
            style: 'currency',
            currency: 'COP',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
        });

        // --- Lógica de Autenticación y Roles ---
        const allowedUsers = {
            "helio": { password: "gets1234", role: "administrador" },
            "cristian": { password: "gets1234", role: "administrador" },
            "mario": { password: "gets1234", role: "administrador" },
            "ventas": { password: "gets1234", role: "vendedor" }
        };

        // --- Referencias a Elementos del DOM ---
        // (Se asignarán en DOMContentLoaded)
        let loginScreen, appContainer, loginForm, loginUsername, loginPassword, loginError,
            appUserDisplay, appRoleDisplay, logoutButton, sidebar,
            productSearchInput, modalBackdrop,
            
            // Vistas
            dashboardView, inventoryView, salesView, purchasesView,
            
            // Notificación (Alert)
            alertModal, alertModalClose, alertModalTitle, alertModalText, alertModalIcon,

            // Añadir Producto
            addProductModal, addProductModalClose, addItemForm,
            productName, productCost, productPrice,
            
            // Inventario
            inventoryList, inventoryLoadingRow,
            
            // Editar Producto
            editModal, editModalClose, editModalForm,
            editProductId, editProductName, editProductCost, editProductPrice,
            
            // Trasladar Producto
            transferModal, transferModalClose, transferModalForm,
            transferProductId, transferProductName, transferStockList,
            transferFromWarehouse, transferToWarehouse, transferQuantity,
            
            // Dashboard
            dashboardStockList, warehouseHeaderTemplate, dashboardLoading,
            transferHistoryList, transferLoading, transferSearch,
            
            // Ventas
            saleModal, saleModalClose, saleForm,
            saleCustomerName, saleCustomerId, saleCustomerPhone, saleCustomerEmail, 
            saleSearchInput, saleSearchResults, saleCartBody, 
            saleSubtotalDisplay, saleDiscountInput, saleTotalDisplay,
            salesHistoryList, salesLoading, openSaleModalBtn, salesSearch,
            
            // Factura de Venta
            invoiceModal, invoiceModalClose, invoicePrintButton,
            invoiceId, invoiceDate, invoiceCustomerName, invoiceCustomerId,
            invoiceCustomerPhone, invoiceCustomerEmail, invoiceItemsBody,
            invoiceSubtotal, invoiceDiscount, invoiceTotal, invoiceSeller,
            
            // Recibo de Traslado
            transferReceiptModal, transferReceiptModalClose, transferReceiptPrintButton,
            receiptTransferId, receiptTransferDate, receiptTransferProduct, receiptTransferQuantity,
            receiptTransferFrom, receiptTransferTo, receiptTransferUser,
            
            // Compras
            openPurchaseModalBtn, purchaseHistoryList, purchaseLoading, purchaseSearch,
            purchaseModal, purchaseModalClose, purchaseForm,
            purchaseSupplierName, purchaseSupplierId, purchaseWarehouseTarget,
            purchaseSearchInput, purchaseSearchResults, purchaseCartBody, purchaseTotal,
            
            // Recibo de Compra
            purchaseReceiptModal, purchaseReceiptModalClose, purchaseReceiptPrintButton,
            receiptPurchaseId, receiptPurchaseDate, receiptPurchaseSupplierName,
            receiptPurchaseSupplierId, receiptPurchaseWarehouse, receiptPurchaseItemsBody,
            receiptPurchaseTotal, receiptPurchaseUser,

            // Creación Rápida (Compra)
            quickAddModal, quickAddModalClose, quickAddForm,
            quickProductName, quickProductCost, quickProductPrice,
            
            // Confirmación General
            confirmModal, confirmModalText, confirmModalConfirm, confirmModalCancel,
            
            // Modo Oscuro
            darkModeToggle, darkModeIcon;

        let saleCart = []; // Carrito de la venta actual
        let purchaseCart = []; // Carrito de la compra actual
        let itemToDelete = { id: null, name: null }; // Para el modal de confirmación
        let warehouseMap = new Map(); // Para acceso rápido a nombres de bodegas

        /**
         * Inicializa la aplicación cuando el DOM está listo
         */
        document.addEventListener("DOMContentLoaded", () => {
            // Asignar todos los elementos del DOM
            assignDOMElements();
            
            // Configurar Listeners
            setupEventListeners();
            
            // Inicializar Modo Oscuro (antes de conectar a Firebase)
            initDarkMode();

            // Conectar a Firebase
            connectToFirebase();
        });

        /**
         * Asigna todas las variables globales a sus elementos del DOM
         */
        function assignDOMElements() {
            loginScreen = document.getElementById("login-screen");
            appContainer = document.getElementById("app-container");
            loginForm = document.getElementById("login-form");
            loginUsername = document.getElementById("login-username");
            loginPassword = document.getElementById("login-password");
            loginError = document.getElementById("login-error");
            
            sidebar = document.getElementById("sidebar");
            appUserDisplay = document.getElementById("app-user");
            appRoleDisplay = document.getElementById("app-role");
            logoutButton = document.getElementById("logout-button");
            
            modalBackdrop = document.getElementById("modal-backdrop");
            
            // Vistas
            dashboardView = document.getElementById("view-dashboard");
            inventoryView = document.getElementById("view-inventory");
            salesView = document.getElementById("view-sales");
            purchasesView = document.getElementById("view-purchases");
            
            // Modal de Alerta
            alertModal = document.getElementById("alert-modal");
            alertModalClose = document.getElementById("alert-modal-close");
            alertModalTitle = document.getElementById("alert-modal-title");
            alertModalText = document.getElementById("alert-modal-text");
            alertModalIcon = document.getElementById("alert-modal-icon");

            // Inventario y Búsqueda
            productSearchInput = document.getElementById("product-search");
            inventoryList = document.getElementById("inventory-list");
            inventoryLoadingRow = document.getElementById("inventory-loading-row");
            
            // Añadir Producto
            addProductModal = document.getElementById("add-product-modal");
            addProductModalClose = document.getElementById("add-product-modal-close");
            addItemForm = document.getElementById("add-item-form");
            productName = document.getElementById("productName");
            productCost = document.getElementById("productCost");
            productPrice = document.getElementById("productPrice");

            // Editar Producto
            editModal = document.getElementById("edit-modal");
            editModalClose = document.getElementById("edit-modal-close");
            editModalForm = document.getElementById("edit-modal-form");
            editProductId = document.getElementById("edit-product-id");
            editProductName = document.getElementById("edit-product-name");
            editProductCost = document.getElementById("edit-product-cost");
            editProductPrice = document.getElementById("edit-product-price");

            // Trasladar
            transferModal = document.getElementById("transfer-modal");
            transferModalClose = document.getElementById("transfer-modal-close");
            transferModalForm = document.getElementById("transfer-modal-form");
            transferProductId = document.getElementById("transfer-product-id");
            transferProductName = document.getElementById("transfer-product-name");
            transferStockList = document.getElementById("transfer-stock-list");
            transferFromWarehouse = document.getElementById("transfer-from-warehouse");
            transferToWarehouse = document.getElementById("transfer-to-warehouse");
            transferQuantity = document.getElementById("transfer-quantity");
            
            // Dashboard
            dashboardStockList = document.getElementById("dashboard-stock-list");
            warehouseHeaderTemplate = document.getElementById("warehouse-header-template");
            dashboardLoading = document.getElementById("dashboard-loading");
            transferHistoryList = document.getElementById("transfer-history-list");
            transferLoading = document.getElementById("transfer-loading");
            transferSearch = document.getElementById("transfer-search");
            
            // Ventas
            saleModal = document.getElementById("sale-modal");
            saleModalClose = document.getElementById("sale-modal-close");
            saleForm = document.getElementById("sale-form");
            saleCustomerName = document.getElementById("sale-customer-name");
            saleCustomerId = document.getElementById("sale-customer-id");
            saleCustomerPhone = document.getElementById("sale-customer-phone");
            saleCustomerEmail = document.getElementById("sale-customer-email");
            saleSearchInput = document.getElementById("sale-search-product");
            saleSearchResults = document.getElementById("sale-search-results");
            saleCartBody = document.getElementById("sale-cart-body");
            saleSubtotalDisplay = document.getElementById("sale-subtotal");
            saleDiscountInput = document.getElementById("sale-discount");
            saleTotalDisplay = document.getElementById("sale-total");
            salesHistoryList = document.getElementById("sales-history-list");
            salesLoading = document.getElementById("sales-loading");
            openSaleModalBtn = document.getElementById("open-sale-modal");
            salesSearch = document.getElementById("sales-search");
            
            // Factura de Venta
            invoiceModal = document.getElementById("invoice-modal");
            invoiceModalClose = document.getElementById("invoice-modal-close");
            invoicePrintButton = document.getElementById("invoice-print-button");
            invoiceId = document.getElementById("invoice-id");
            invoiceDate = document.getElementById("invoice-date");
            invoiceCustomerName = document.getElementById("invoice-customer-name");
            invoiceCustomerId = document.getElementById("invoice-customer-id");
            invoiceCustomerPhone = document.getElementById("invoice-customer-phone");
            invoiceCustomerEmail = document.getElementById("invoice-customer-email");
            invoiceItemsBody = document.getElementById("invoice-items-body");
            invoiceSubtotal = document.getElementById("invoice-subtotal");
            invoiceDiscount = document.getElementById("invoice-discount");
            invoiceTotal = document.getElementById("invoice-total");
            invoiceSeller = document.getElementById("invoice-seller");
            
            // Recibo de Traslado
            transferReceiptModal = document.getElementById("transfer-receipt-modal");
            transferReceiptModalClose = document.getElementById("transfer-receipt-modal-close");
            transferReceiptPrintButton = document.getElementById("transfer-receipt-print-button");
            receiptTransferId = document.getElementById("receipt-transfer-id");
            receiptTransferDate = document.getElementById("receipt-transfer-date");
            receiptTransferProduct = document.getElementById("receipt-transfer-product");
            receiptTransferQuantity = document.getElementById("receipt-transfer-quantity");
            receiptTransferFrom = document.getElementById("receipt-transfer-from");
            receiptTransferTo = document.getElementById("receipt-transfer-to");
            receiptTransferUser = document.getElementById("receipt-transfer-user");
            
            // Compras
            openPurchaseModalBtn = document.getElementById("open-purchase-modal");
            purchaseHistoryList = document.getElementById("purchase-history-list");
            purchaseLoading = document.getElementById("purchase-loading");
            purchaseSearch = document.getElementById("purchase-search");
            purchaseModal = document.getElementById("purchase-modal");
            purchaseModalClose = document.getElementById("purchase-modal-close");
            purchaseForm = document.getElementById("purchase-form");
            purchaseSupplierName = document.getElementById("purchase-supplier-name");
            purchaseSupplierId = document.getElementById("purchase-supplier-id");
            purchaseWarehouseTarget = document.getElementById("purchase-warehouse-target");
            purchaseSearchInput = document.getElementById("purchase-search-product"); // CORREGIDO: Declaración duplicada eliminada
            purchaseSearchResults = document.getElementById("purchase-search-results");
            purchaseCartBody = document.getElementById("purchase-cart-body");
            purchaseTotal = document.getElementById("purchase-total");
            
            // Recibo de Compra
            purchaseReceiptModal = document.getElementById("purchase-receipt-modal");
            purchaseReceiptModalClose = document.getElementById("purchase-receipt-modal-close");
            purchaseReceiptPrintButton = document.getElementById("purchase-receipt-print-button");
            receiptPurchaseId = document.getElementById("receipt-purchase-id");
            receiptPurchaseDate = document.getElementById("receipt-purchase-date");
            receiptPurchaseSupplierName = document.getElementById("receipt-purchase-supplier-name");
            receiptPurchaseSupplierId = document.getElementById("receipt-purchase-supplier-id");
            receiptPurchaseWarehouse = document.getElementById("receipt-purchase-warehouse");
            receiptPurchaseItemsBody = document.getElementById("receipt-purchase-items-body");
            receiptPurchaseTotal = document.getElementById("receipt-purchase-total");
            receiptPurchaseUser = document.getElementById("receipt-purchase-user");

            // Creación Rápida (Compra)
            quickAddModal = document.getElementById("quick-add-product-modal");
            quickAddModalClose = document.getElementById("quick-add-modal-close");
            quickAddForm = document.getElementById("quick-add-form");
            quickProductName = document.getElementById("quick-product-name");
            quickProductCost = document.getElementById("quick-product-cost");
            quickProductPrice = document.getElementById("quick-product-price");

            // Confirmación General
            confirmModal = document.getElementById("confirm-modal");
            confirmModalText = document.getElementById("confirm-modal-text");
            confirmModalConfirm = document.getElementById("confirm-modal-confirm");
            confirmModalCancel = document.getElementById("confirm-modal-cancel");
            
            // Modo Oscuro
            darkModeToggle = document.getElementById("dark-mode-toggle");
            darkModeIcon = document.getElementById("dark-mode-icon");
        }

        /**
         * Configura todos los event listeners de la aplicación
         * Añade comprobaciones de existencia (if) para robustez
         */
        function setupEventListeners() {
            if (loginForm) loginForm.addEventListener("submit", handleLogin);
            if (logoutButton) logoutButton.addEventListener("click", handleLogout);
            
            if (sidebar) sidebar.addEventListener("click", (e) => {
                const button = e.target.closest(".nav-button");
                if (button) {
                    showView(button.dataset.view);
                }
            });
            
            // Listeners de Modales
            [addProductModalClose, editModalClose, transferModalClose, 
             saleModalClose, invoiceModalClose, transferReceiptModalClose,
             purchaseModalClose, purchaseReceiptModalClose, quickAddModalClose,
             confirmModalCancel, alertModalClose
            ].forEach(btn => {
                if (btn) btn.addEventListener("click", () => closeModal(btn.closest('.fixed')));
            });
            
            if (document.getElementById("open-add-product-modal")) {
                document.getElementById("open-add-product-modal").addEventListener("click", () => openModal(addProductModal));
            }

            // Formularios
            if (addItemForm) addItemForm.addEventListener("submit", handleAddItem);
            if (editModalForm) editModalForm.addEventListener("submit", handleEditItem);
            if (transferModalForm) transferModalForm.addEventListener("submit", handleTransferStock);
            if (saleForm) saleForm.addEventListener("submit", handleProcessSale);
            if (purchaseForm) purchaseForm.addEventListener("submit", handleProcessPurchase);
            if (quickAddForm) quickAddForm.addEventListener("submit", handleQuickAddItem);
            
            // Buscadores
            if (productSearchInput) productSearchInput.addEventListener("input", filterInventoryTable);
            if (saleSearchInput) saleSearchInput.addEventListener("input", filterSaleSearch);
            if (purchaseSearchInput) purchaseSearchInput.addEventListener("input", filterPurchaseSearch);
            if (salesSearch) salesSearch.addEventListener("input", filterSalesHistory);
            if (purchaseSearch) purchaseSearch.addEventListener("input", filterPurchaseHistory);
            if (transferSearch) transferSearch.addEventListener("input", filterTransferHistory);

            // Carritos
            if (saleDiscountInput) saleDiscountInput.addEventListener("input", updateSaleCartUI);
            
            // Impresión
            if (invoicePrintButton) invoicePrintButton.addEventListener("click", () => window.print());
            if (transferReceiptPrintButton) transferReceiptPrintButton.addEventListener("click", () => window.print());
            if (purchaseReceiptPrintButton) purchaseReceiptPrintButton.addEventListener("click", () => window.print());
            
            // Confirmación
            if (confirmModalConfirm) confirmModalConfirm.addEventListener("click", confirmDelete);

            // Modo Oscuro
            if (darkModeToggle) darkModeToggle.addEventListener("click", toggleDarkMode);
            
            // Botones de Venta/Compra
            if (openSaleModalBtn) openSaleModalBtn.addEventListener("click", () => openSaleModal());
            if (openPurchaseModalBtn) openPurchaseModalBtn.addEventListener("click", () => openPurchaseModal());
        }

        /**
         * Conecta a Firebase y establece el listener de estado de autenticación
         */
        async function connectToFirebase() {
            try {
                const authToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (authToken) {
                    await signInWithCustomToken(auth, authToken);
                } else {
                    await signInAnonymously(auth);
                }

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        currentUserId = user.uid;
                        // Definir rutas de la base de datos (privadas por defecto)
                        const basePath = `artifacts/${appId}/users/${currentUserId}`;
                        inventoryCollectionPath = `${basePath}/inventory`;
                        salesCollectionPath = `${basePath}/sales`;
                        warehousesCollectionPath = `${basePath}/warehouses`;
                        transfersCollectionPath = `${basePath}/transfers`;
                        purchasesCollectionPath = `${basePath}/purchases`;
                        
                    } else {
                        // Limpiar estado si no hay usuario
                        handleLogout(false); // No mostrar login, solo limpiar
                    }
                });

            } catch (error) {
                console.error("Error conectando a Firebase:", error);
                loginError.innerText = "Error crítico al conectar con la base de datos.";
                loginError.classList.remove("hidden");
            }
        }
        
        /**
         * Maneja el intento de inicio de sesión del usuario
         */
        function handleLogin(e) {
            e.preventDefault();
            const username = loginUsername.value.toLowerCase().trim();
            const password = loginPassword.value;
            
            const user = allowedUsers[username];
            
            if (user && user.password === password) {
                // Inicio de sesión exitoso
                currentUserRole = user.role;
                currentUsername = username;
                
                loginScreen.classList.add("hidden");
                appContainer.classList.add("flex"); // Cambiado de 'remove("hidden")' a 'add("flex")'
                loginError.classList.add("hidden");
                loginForm.reset();
                
                // Configurar UI según el rol
                setupUIForRole(username, currentUserRole);
                
                // Cargar TODOS los datos
                loadAllData();
                
            } else {
                // Error de inicio de sesión
                loginError.innerText = "Usuario o contraseña incorrectos.";
                loginError.classList.remove("hidden");
            }
        }

        /**
         * Cierra la sesión del usuario y vuelve a la pantalla de login
         */
        function handleLogout(showLogin = true) {
            // Ocultar app y mostrar login (si 'showLogin' es true)
            appContainer.classList.remove("flex");
            appContainer.classList.add("hidden");
            if (showLogin) {
                loginScreen.classList.remove("hidden");
            }
            
            // Limpiar estado
            currentUserRole = null;
            currentUsername = null;
            
            // Limpiar vistas y cachés
            if (inventoryList) inventoryList.innerHTML = ''; 
            if (dashboardStockList) dashboardStockList.innerHTML = '';
            if (transferHistoryList) transferHistoryList.innerHTML = '';
            if (salesHistoryList) salesHistoryList.innerHTML = '';
            if (purchaseHistoryList) purchaseHistoryList.innerHTML = '';
            fullInventoryList = [];
            warehouseList = [];
            warehouseMap.clear();
            if (productSearchInput) productSearchInput.value = '';
            
            // Detener todos los listeners de Firestore
            if (inventoryUnsubscribe) inventoryUnsubscribe();
            if (salesUnsubscribe) salesUnsubscribe();
            if (warehousesUnsubscribe) warehousesUnsubscribe();
            if (transfersUnsubscribe) transfersUnsubscribe();
            if (purchasesUnsubscribe) purchasesUnsubscribe();
            
            inventoryUnsubscribe = null;
            salesUnsubscribe = null;
            warehousesUnsubscribe = null;
            transfersUnsubscribe = null;
            purchasesUnsubscribe = null;
        }

        /**
         * Configura la visibilidad de los elementos de la UI según el rol
         */
        function setupUIForRole(username, role) {
            if (appUserDisplay) appUserDisplay.innerText = username;
            if (appRoleDisplay) appRoleDisplay.innerText = role;

            const adminElements = document.querySelectorAll(".admin-only");
            
            if (role === "administrador") {
                adminElements.forEach(el => el.classList.remove("hidden"));
                showView('dashboard'); // Vista inicial para Admin
            } else {
                // Es "vendedor"
                adminElements.forEach(el => el.classList.add("hidden"));
                showView('sales'); // Vista inicial para Vendedor
            }
        }

        /**
         * Muestra una vista (pestaña) y oculta las demás
         */
        function showView(viewId) {
            // Ocultar todas las vistas
            document.querySelectorAll('.app-view').forEach(view => {
                view.classList.add('hidden');
            });
            
            // Quitar clase activa de todos los botones
            document.querySelectorAll('.nav-button').forEach(button => {
                button.classList.remove('bg-indigo-700');
            });

            // Mostrar la vista seleccionada
            const viewToShow = document.getElementById(`view-${viewId}`);
            if (viewToShow) {
                viewToShow.classList.remove('hidden');
            }
            
            // Añadir clase activa al botón seleccionado
            const buttonToActivate = document.querySelector(`.nav-button[data-view="${viewId}"]`);
            if (buttonToActivate) {
                buttonToActivate.classList.add('bg-indigo-700');
            }
        }

        /**
         * Carga todos los listeners de Firestore
         */
        function loadAllData() {
            if (!currentUserId) return;
            
            // Detener listeners antiguos si existen
            if (inventoryUnsubscribe) inventoryUnsubscribe();
            if (salesUnsubscribe) salesUnsubscribe();
            if (warehousesUnsubscribe) warehousesUnsubscribe();
            if (transfersUnsubscribe) transfersUnsubscribe();
            if (purchasesUnsubscribe) purchasesUnsubscribe();

            loadWarehouses(); // Cargar primero bodegas
            loadInventory();    // Luego inventario
            loadSalesHistory();
            loadTransferHistory();
            loadPurchaseHistory();
        }

        // ===========================================
        // FUNCIONES DE BODEGAS (WAREHOUSES)
        // ===========================================

        /**
         * Carga la lista de bodegas
         */
        function loadWarehouses() {
            if (!warehousesCollectionPath) return;

            const q = query(collection(db, warehousesCollectionPath));
            warehousesUnsubscribe = onSnapshot(q, (snapshot) => {
                warehouseList = [];
                warehouseMap.clear();

                if (snapshot.empty) {
                    console.log("No hay bodegas, creando bodegas de prueba...");
                    seedWarehouses(); // Crear bodegas si no existen
                    return;
                }
                
                snapshot.forEach((doc) => {
                    const warehouse = { id: doc.id, ...doc.data() };
                    warehouseList.push(warehouse);
                    warehouseMap.set(warehouse.id, warehouse.name);
                });
                
                // Una vez cargadas, actualizar UI que dependa de ellas
                updateDashboardWarehouseHeaders();
                updateWarehouseSelects();

            }, (error) => {
                console.error("Error al cargar bodegas: ", error);
            });
        }

        /**
         * Crea las bodegas de prueba si no existe ninguna
         */
        async function seedWarehouses() {
            if (!warehousesCollectionPath) return;
            
            const testWarehouses = [
                { name: "Bodega Principal", isMain: true },
                { name: "Bodega Aliada 1", isMain: false },
                { name: "Bodega Aliada 2", isMain: false },
                { name: "Bodega Aliada 3", isMain: false },
                { name: "Bodega Aliada 4", isMain: false },
                { name: "Bodega Aliada 5", isMain: false }
            ];

            try {
                const batch = writeBatch(db);
                testWarehouses.forEach(wh => {
                    const newDocRef = doc(collection(db, warehousesCollectionPath));
                    batch.set(newDocRef, wh);
                });
                await batch.commit();
                console.log("Bodegas de prueba añadidas.");
                // onSnapshot se disparará solo y recargará la lista
            } catch (error) {
                console.error("Error al añadir bodegas de prueba: ", error);
            }
        }
        
        /**
         * Actualiza los <select> de bodegas en los modales
         */
        function updateWarehouseSelects() {
            const selects = [transferFromWarehouse, transferToWarehouse, purchaseWarehouseTarget];
            
            selects.forEach(select => {
                if (!select) return;
                select.innerHTML = ''; // Limpiar opciones
                
                // Opción por defecto
                if (select.id !== 'purchase-warehouse-target') {
                     select.innerHTML = '<option value="">Seleccione...</option>';
                }
                
                warehouseList.forEach(wh => {
                    const option = document.createElement('option');
                    option.value = wh.id;
                    option.innerText = wh.name;
                    select.appendChild(option);
                });
            });
        }

        // ===========================================
        // FUNCIONES DE INVENTARIO
        // ===========================================

        /**
         * Carga el inventario desde Firestore y activa el listener (onSnapshot)
         */
        function loadInventory() {
            if (!inventoryCollectionPath) return;

            const q = query(collection(db, inventoryCollectionPath)); // CORRECCIÓN: 'q' no estaba definida

            if (inventoryLoadingRow) inventoryLoadingRow.classList.remove('hidden');

            inventoryUnsubscribe = onSnapshot(q, (snapshot) => {
                if (inventoryLoadingRow) inventoryLoadingRow.classList.add('hidden');
                inventoryList.innerHTML = ''; // Limpiar la lista actual
                fullInventoryList = []; // Limpiar caché local

                if (snapshot.empty && warehouseList.length > 0) {
                    // Solo sembrar productos si ya hay bodegas cargadas
                    console.log("Inventario vacío, añadiendo productos de prueba...");
                    seedProducts(); 
                    const row = document.createElement('tr');
                    row.innerHTML = `<td colspan="6" class="text-center text-gray-500 py-4">Añadiendo productos de prueba...</td>`;
                    inventoryList.appendChild(row);
                    return;
                }

                snapshot.forEach((doc) => {
                    const item = doc.data();
                    item.id = doc.id;
                    fullInventoryList.push(item); // Guardar en caché para búsqueda
                });
                
                // Ordenar alfabéticamente
                fullInventoryList.sort((a, b) => a.name.localeCompare(b.name));
                
                // Renderizar la tabla
                renderInventoryTable(fullInventoryList);
                
                // Actualizar el dashboard
                updateDashboardStockTable(fullInventoryList);

            }, (error) => {
                console.error("Error al cargar inventario: ", error);
                if (inventoryList) inventoryList.innerHTML = `<tr><td colspan="6" class="text-center text-red-500 py-4">Error al cargar inventario.</td></tr>`;
            });
        }
        
        /**
         * Renderiza la tabla de inventario a partir de una lista de productos
         */
        function renderInventoryTable(products) {
            if (!inventoryList) return;
            inventoryList.innerHTML = ''; // Limpiar
            
            if (products.length === 0) {
                 if (inventoryLoadingRow) inventoryLoadingRow.classList.remove('hidden');
                 inventoryLoadingRow.querySelector('td').innerText = "No hay productos en el inventario.";
                 return;
            } else {
                 if (inventoryLoadingRow) inventoryLoadingRow.classList.add('hidden');
            }

            products.forEach(item => {
                const row = document.createElement('tr');
                row.className = "border-b border-gray-200 dark:border-dark-border hover:bg-gray-100 dark:hover:bg-gray-700";
                row.dataset.id = item.id; // Guardar ID en la fila
                row.dataset.name = item.name.toLowerCase(); // Para búsqueda

                // Calcular stock total
                let totalStock = 0;
                if (item.stockByWarehouse) {
                    totalStock = Object.values(item.stockByWarehouse).reduce((acc, val) => acc + val, 0);
                }

                const totalValue = totalStock * (item.cost || 0);

                row.innerHTML = `
                    <td class="py-3 px-4 text-left">${item.name}</td>
                    <td class="py-3 px-4 text-center">${totalStock}</td>
                    <td class="py-3 px-4 text-right">${formatter.format(item.cost || 0)}</td>
                    <td class="py-3 px-4 text-right">${formatter.format(item.price || 0)}</td>
                    <td class="py-3 px-4 text-right font-medium">${formatter.format(totalValue)}</td>
                    <td class="py-3 px-4 text-center whitespace-nowrap">
                        <button data-id="${item.id}" class="transfer-btn bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-3 rounded text-sm mr-1 w-10" title="Trasladar">
                            <i class="fas fa-exchange-alt"></i>
                        </button>
                        <button data-id="${item.id}" class="edit-btn bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-3 rounded text-sm mr-1 w-10" title="Editar">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button data-id="${item.id}" data-name="${item.name}" class="delete-btn bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-3 rounded text-sm w-10" title="Eliminar">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                `;
                inventoryList.appendChild(row);
            });
            
            // Añadir listeners a los botones recién creados
            addInventoryButtonListeners();
        }

        /**
         * Añade listeners a los botones de la tabla de inventario
         */
        function addInventoryButtonListeners() {
            document.querySelectorAll('.transfer-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.target.closest('button').dataset.id;
                    openTransferModal(id);
                });
            });
            
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.target.closest('button').dataset.id;
                    openEditModal(id);
                });
            });

            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const btn = e.target.closest('button');
                    const id = btn.dataset.id;
                    const name = btn.dataset.name;
                    openConfirmDelete(id, name);
                });
            });
        }

        /**
         * Añade 5 productos de prueba si la base de datos está vacía
         */
        async function seedProducts() {
            if (!inventoryCollectionPath || !warehouseList.length) return;
            
            const mainWarehouse = warehouseList.find(wh => wh.isMain);
            if (!mainWarehouse) {
                console.error("No se encontró Bodega Principal para sembrar productos.");
                return;
            }
            const mainWhId = mainWarehouse.id;

            const testProducts = [
                { name: "Samsung Galaxy S24 Ultra", stock: 15, cost: 4500000, price: 5800000 },
                { name: "iPhone 15 Pro Max (256GB)", stock: 10, cost: 5200000, price: 6500000 },
                { name: "Xiaomi Redmi Note 13 Pro", stock: 30, cost: 1100000, price: 1550000 },
                { name: "Cargador Carga Rápida 65W", stock: 50, cost: 80000, price: 140000 },
                { name: "Audífonos Bluetooth ProSound", stock: 40, cost: 150000, price: 280000 }
            ];

            try {
                const batch = writeBatch(db);
                testProducts.forEach(product => {
                    const newDocRef = doc(collection(db, inventoryCollectionPath));
                    batch.set(newDocRef, {
                        name: product.name,
                        cost: product.cost,
                        price: product.price,
                        stockByWarehouse: {
                            [mainWhId]: product.stock
                        }
                    });
                });
                await batch.commit();
                console.log("¡Productos de prueba añadidos!");
            } catch (error) {
                console.error("Error al añadir productos de prueba: ", error);
            }
        }

        /**
         * Filtra la tabla de inventario principal según el texto de búsqueda
         */
        function filterInventoryTable() {
            const filter = productSearchInput.value.toLowerCase();
            const filteredProducts = fullInventoryList.filter(item => 
                item.name.toLowerCase().includes(filter)
            );
            renderInventoryTable(filteredProducts);
        }

        /**
         * Maneja el envío del formulario para añadir un nuevo producto
         */
        async function handleAddItem(e) {
            e.preventDefault();
            if (!inventoryCollectionPath) return;

            const name = productName.value.trim();
            const cost = parseFloat(productCost.value);
            const price = parseFloat(productPrice.value);

            if (!name || isNaN(cost) || isNaN(price)) {
                showNotification("Error", "Por favor, rellene todos los campos correctamente.", "error");
                return;
            }

            try {
                // Crear producto con stock 0 en todas las bodegas
                const initialStock = {};
                warehouseList.forEach(wh => {
                    initialStock[wh.id] = 0;
                });
                
                await addDoc(collection(db, inventoryCollectionPath), {
                    name: name,
                    cost: cost,
                    price: price,
                    stockByWarehouse: initialStock
                });
                
                addItemForm.reset();
                closeModal(addProductModal);
                showNotification("Éxito", `Producto "${name}" añadido con stock 0.`);
                
            } catch (error) {
                console.error("Error al añadir item: ", error);
                showNotification("Error", "Error al guardar el producto. Intente de nuevo.", "error");
            }
        }
        
        /**
         * Abre el modal para editar un producto
         */
        function openEditModal(id) {
            const item = fullInventoryList.find(p => p.id === id);
            if (!item) return;

            editProductId.value = id;
            editProductName.value = item.name;
            editProductCost.value = item.cost;
            editProductPrice.value = item.price;
            
            openModal(editModal);
            editProductName.focus();
        }

        /**
         * Maneja el envío del formulario para editar el producto
         */
        async function handleEditItem(e) {
            e.preventDefault();
            if (!inventoryCollectionPath) return;

            const id = editProductId.value;
            const name = editProductName.value.trim();
            const cost = parseFloat(editProductCost.value);
            const price = parseFloat(editProductPrice.value);

            if (!name || isNaN(cost) || isNaN(price)) {
                showNotification("Error", "Por favor, rellene todos los campos correctamente.", "error");
                return;
            }

            const itemRef = doc(db, inventoryCollectionPath, id);
            
            try {
                await updateDoc(itemRef, {
                    name: name,
                    cost: cost,
                    price: price
                });
                
                closeModal(editModal);
                showNotification("Éxito", "Producto actualizado correctamente.");
                
            } catch (error) {
                console.error("Error al editar el producto: ", error);
                showNotification("Error", "Error al editar el producto. Intente de nuevo.", "error");
            }
        }

        /**
         * Abre el modal de confirmación para eliminar un producto
         */
        function openConfirmDelete(id, name) {
            itemToDelete = { id, name };
            confirmModalText.innerText = `¿Realmente desea eliminar el producto "${name}"? Esta acción no se puede deshacer.`;
            openModal(confirmModal);
        }

        /**
         * Confirma y ejecuta la eliminación del producto
         */
        async function confirmDelete() {
            const { id, name } = itemToDelete;
            if (!id || !inventoryCollectionPath) return;

            const itemRef = doc(db, inventoryCollectionPath, id);
            try {
                await deleteDoc(itemRef);
                closeModal(confirmModal);
                showNotification("Éxito", `Producto "${name}" eliminado.`);
                itemToDelete = { id: null, name: null };
            } catch (error) {
                console.error("Error al eliminar producto: ", error);
                showNotification("Error", "Error al eliminar el producto. Intente de nuevo.", "error");
            }
        }


        // ===========================================
        // FUNCIONES DE TRASLADOS
        // ===========================================

        /**
         * Abre el modal para trasladar un producto
         */
        function openTransferModal(id) {
            const item = fullInventoryList.find(p => p.id === id);
            if (!item) return;

            transferProductId.value = id;
            transferProductName.innerText = item.name;
            
            // Llenar lista de stock actual
            transferStockList.innerHTML = '';
            warehouseList.forEach(wh => {
                const stock = item.stockByWarehouse?.[wh.id] || 0;
                const stockEl = document.createElement('div');
                stockEl.className = "p-2 bg-gray-100 dark:bg-gray-700 rounded";
                stockEl.innerHTML = `<span class="font-medium dark:text-gray-200">${wh.name}:</span> ${stock}`;
                transferStockList.appendChild(stockEl);
            });

            // Llenar selects (ya deberían estar llenos por loadWarehouses)
            
            transferModalForm.reset();
            openModal(transferModal);
        }

        /**
         * Maneja el envío del formulario para trasladar stock
         */
        async function handleTransferStock(e) {
            e.preventDefault();
            if (!inventoryCollectionPath || !transfersCollectionPath) return;

            const id = transferProductId.value;
            const fromWhId = transferFromWarehouse.value;
            const toWhId = transferToWarehouse.value;
            const quantity = parseInt(transferQuantity.value);

            if (!fromWhId || !toWhId || isNaN(quantity) || quantity <= 0) {
                showNotification("Error", "Por favor, complete todos los campos correctamente.", "error");
                return;
            }

            if (fromWhId === toWhId) {
                showNotification("Error", "La bodega de origen y destino no pueden ser la misma.", "error");
                return;
            }

            const itemRef = doc(db, inventoryCollectionPath, id);
            
            try {
                const docSnap = await getDoc(itemRef);
                if (!docSnap.exists()) {
                    throw new Error("El producto ya no existe.");
                }
                
                const item = docSnap.data();
                const stockOrigen = item.stockByWarehouse?.[fromWhId] || 0;

                if (stockOrigen < quantity) {
                    showNotification("Error", `No hay stock suficiente en la bodega "${warehouseMap.get(fromWhId)}". (Actual: ${stockOrigen})`, "error");
                    return;
                }

                // Calcular nuevos stocks
                const newStockOrigen = stockOrigen - quantity;
                const newStockDestino = (item.stockByWarehouse?.[toWhId] || 0) + quantity;

                // Crear el registro de traslado
                const transferRecord = {
                    productId: id,
                    productName: item.name,
                    quantity: quantity,
                    fromWarehouseId: fromWhId,
                    fromWarehouseName: warehouseMap.get(fromWhId),
                    toWarehouseId: toWhId,
                    toWarehouseName: warehouseMap.get(toWhId),
                    userId: currentUsername,
                    createdAt: new Date().toISOString()
                };

                // Usar un batch para asegurar atomicidad
                const batch = writeBatch(db);
                
                // 1. Actualizar el inventario
                batch.update(itemRef, {
                    [`stockByWarehouse.${fromWhId}`]: newStockOrigen,
                    [`stockByWarehouse.${toWhId}`]: newStockDestino
                });
                
                // 2. Añadir el registro de traslado
                const newTransferRef = doc(collection(db, transfersCollectionPath));
                batch.set(newTransferRef, transferRecord);

                await batch.commit();
                
                // Éxito
                closeModal(transferModal);
                showNotification("Éxito", "Traslado realizado correctamente.");
                
                // Mostrar recibo
                showTransferReceipt({ ...transferRecord, id: newTransferRef.id });

            } catch (error) {
                console.error("Error al procesar traslado: ", error);
                showNotification("Error", `Error al procesar el traslado: ${error.message}`, "error");
            }
        }
        
        /**
         * Muestra el historial de traslados en el Dashboard
         */
        function loadTransferHistory() {
            if (!transfersCollectionPath) return;

            transferLoading.classList.remove('hidden');
            const q = query(collection(db, transfersCollectionPath));

            transfersUnsubscribe = onSnapshot(q, (snapshot) => {
                transferLoading.classList.add('hidden');
                transferHistoryList.innerHTML = '';
                
                if (snapshot.empty) {
                    transferHistoryList.innerHTML = `<tr><td colspan="6" class="text-center text-gray-500 py-4">No se han realizado traslados.</td></tr>`;
                    return;
                }
                
                let transfers = [];
                snapshot.forEach(doc => {
                    transfers.push({ id: doc.id, ...doc.data() });
                });
                
                // Ordenar por fecha (más reciente primero)
                transfers.sort((a, b) => b.createdAt.localeCompare(a.createdAt));
                
                renderTransferHistory(transfers);

            }, (error) => {
                console.error("Error al cargar historial de traslados: ", error);
                transferLoading.innerText = "Error al cargar historial.";
            });
        }
        
        /**
         * Renderiza la tabla de historial de traslados
         */
        function renderTransferHistory(transfers) {
            transferHistoryList.innerHTML = '';
            
            if (transfers.length === 0) {
                 transferHistoryList.innerHTML = `<tr><td colspan="6" class="text-center text-gray-500 py-4">No se encontraron traslados.</td></tr>`;
                 return;
            }

            transfers.forEach(t => {
                const row = document.createElement('tr');
                row.className = 'transfer-history-row';
                // Guardar datos para búsqueda
                row.dataset.search = `${t.productName} ${t.fromWarehouseName} ${t.toWarehouseName} ${t.userId}`.toLowerCase();
                
                row.innerHTML = `
                    <td class="py-3 px-4">${formatDate(t.createdAt)}</td>
                    <td class="py-3 px-4">${t.productName}</td>
                    <td class="py-3 px-4 text-center">${t.quantity}</td>
                    <td class="py-3 px-4">${t.fromWarehouseName}</td>
                    <td class="py-3 px-4">${t.toWarehouseName}</td>
                    <td class="py-3 px-4 capitalize">${t.userId}</td>
                `;
                transferHistoryList.appendChild(row);
            });
        }
        
        /**
         * Filtra el historial de traslados
         */
        function filterTransferHistory() {
            const filter = transferSearch.value.toLowerCase();
            document.querySelectorAll('.transfer-history-row').forEach(row => {
                if (row.dataset.search.includes(filter)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        /**
         * Muestra el recibo de traslado
         */
        function showTransferReceipt(transferData) {
            receiptTransferId.innerText = transferData.id.slice(0, 8).toUpperCase();
            receiptTransferDate.innerText = formatDate(transferData.createdAt);
            receiptTransferProduct.innerText = transferData.productName;
            receiptTransferQuantity.innerText = transferData.quantity;
            receiptTransferFrom.innerText = transferData.fromWarehouseName;
            receiptTransferTo.innerText = transferData.toWarehouseName;
            receiptTransferUser.innerText = transferData.userId;
            
            openModal(transferReceiptModal);
        }

        // ===========================================
        // FUNCIONES DE VENTAS (POS)
        // ===========================================

        /**
         * Abre el modal de punto de venta.
         */
        function openSaleModal() {
            // Resetear el modal de venta
            saleForm.reset();
            saleCart = [];
            saleSearchResults.innerHTML = '';
            saleSearchResults.classList.add('hidden');
            updateSaleCartUI();
            
            openModal(saleModal);
            saleCustomerName.focus();
        }

        /**
         * Filtra la lista de productos en el modal de venta
         */
        function filterSaleSearch() {
            const filter = saleSearchInput.value.toLowerCase().trim();
            
            if (filter.length < 1) {
                saleSearchResults.innerHTML = '';
                saleSearchResults.classList.add('hidden');
                return;
            }
            
            // Solo vender desde la bodega principal
            const mainWarehouse = warehouseList.find(wh => wh.isMain);
            if (!mainWarehouse) {
                saleSearchResults.innerHTML = '<li class="p-2 text-red-500">Error: No se ha definido una Bodega Principal.</li>';
                saleSearchResults.classList.remove('hidden');
                return;
            }

            const results = fullInventoryList.filter(item => {
                const stock = item.stockByWarehouse?.[mainWarehouse.id] || 0;
                return item.name.toLowerCase().includes(filter) && stock > 0;
            });

            saleSearchResults.innerHTML = '';
            if (results.length > 0) {
                results.forEach(item => {
                    const stock = item.stockByWarehouse?.[mainWarehouse.id] || 0;
                    const li = document.createElement('li');
                    li.className = "p-2 border-b dark:border-dark-border hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer";
                    li.innerText = `${item.name} (Stock: ${stock})`;
                    li.dataset.id = item.id;
                    li.addEventListener('click', () => {
                        addProductToSaleCart(item.id, mainWarehouse.id);
                        saleSearchInput.value = '';
                        saleSearchResults.innerHTML = '';
                        saleSearchResults.classList.add('hidden');
                    });
                    saleSearchResults.appendChild(li);
                });
                saleSearchResults.classList.remove('hidden');
            } else {
                saleSearchResults.innerHTML = '<li class="p-2 text-gray-500">No se encontraron productos...</li>';
                saleSearchResults.classList.remove('hidden');
            }
        }

        /**
         * Añade un producto al carrito de venta
         */
        function addProductToSaleCart(id, mainWarehouseId) {
            const product = fullInventoryList.find(p => p.id === id);
            if (!product) return;
            
            const maxStock = product.stockByWarehouse?.[mainWarehouseId] || 0;
            if (maxStock <= 0) {
                showNotification("Agotado", `No hay stock de "${product.name}" en la Bodega Principal.`, "error");
                return;
            }
            
            const existingItem = saleCart.find(item => item.id === id);
            
            if (existingItem) {
                // Incrementar cantidad si hay stock
                if (existingItem.quantity < maxStock) {
                    existingItem.quantity++;
                } else {
                    showNotification("Stock Límite", `No hay más stock disponible para "${product.name}". (Máx: ${maxStock})`, "warn");
                }
            } else {
                // Añadir nuevo item al carrito
                saleCart.push({
                    id: product.id,
                    name: product.name,
                    price: product.price,
                    cost: product.cost, // Guardar el costo al momento de la venta
                    quantity: 1,
                    maxStock: maxStock
                });
            }
            updateSaleCartUI();
        }

        /**
         * Actualiza la tabla del carrito de venta y el total
         */
        function updateSaleCartUI() {
            saleCartBody.innerHTML = '';
            let subtotal = 0;

            if (saleCart.length === 0) {
                saleCartBody.innerHTML = '<tr><td colspan="5" class="text-center text-gray-500 py-6">El carrito está vacío</td></tr>';
                saleSubtotalDisplay.innerText = formatter.format(0);
                saleTotalDisplay.innerText = formatter.format(0);
                saleDiscountInput.value = '';
                return;
            }

            saleCart.forEach((item, index) => {
                const itemTotal = item.price * item.quantity;
                subtotal += itemTotal;
                
                const row = document.createElement('tr');
                row.className = index % 2 === 0 ? 'bg-white dark:bg-dark-card' : 'bg-gray-50 dark:bg-gray-700'; 
                
                row.innerHTML = `
                    <td class="py-2 px-3">${item.name}</td>
                    <td class="py-2 px-3 text-right">${formatter.format(item.price)}</td>
                    <td class="py-2 px-3 w-32">
                        <input 
                            type="number" 
                            value="${item.quantity}" 
                            min="1" 
                            max="${item.maxStock}" 
                            class="w-20 p-1 border rounded text-center dark:bg-dark-bg dark:border-dark-border sale-cart-quantity" 
                            data-id="${item.id}"
                        >
                    </td>
                    <td class="py-2 px-3 text-right">${formatter.format(itemTotal)}</td>
                    <td class="py-2 px-3 text-center">
                        <button 
                            type="button" 
                            class="text-red-500 hover:text-red-700 font-bold text-xl sale-cart-remove" 
                            data-id="${item.id}"
                            title="Quitar"
                        >
                            &times;
                        </button>
                    </td>
                `;
                saleCartBody.appendChild(row);
            });
            
            // Calcular Total Final con Descuento
            const discount = parseFloat(saleDiscountInput.value) || 0;
            const total = subtotal - discount;

            saleSubtotalDisplay.innerText = formatter.format(subtotal);
            saleTotalDisplay.innerText = formatter.format(total < 0 ? 0 : total);

            // Añadir listeners a los inputs y botones del carrito
            document.querySelectorAll('.sale-cart-quantity').forEach(input => {
                input.addEventListener('change', (e) => {
                    const id = e.target.dataset.id;
                    let newQuantity = parseInt(e.target.value);
                    const item = saleCart.find(i => i.id === id);
                    
                    if (isNaN(newQuantity) || newQuantity < 1) {
                        newQuantity = 1;
                    }
                    if (newQuantity > item.maxStock) {
                        newQuantity = item.maxStock;
                        showNotification("Stock Límite", `Stock máximo para ${item.name} es ${item.maxStock}.`, "warn");
                    }
                    
                    item.quantity = newQuantity;
                    e.target.value = newQuantity; // Corregir el valor en el input
                    updateSaleCartUI();
                });
            });

            document.querySelectorAll('.sale-cart-remove').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.target.closest('button').dataset.id;
                    saleCart = saleCart.filter(item => item.id !== id);
                    updateSaleCartUI();
                });
            });
        }

        /**
         * Procesa la venta final: actualiza stock y guarda el registro de venta
         */
        async function handleProcessSale(e) {
            e.preventDefault();
            if (!inventoryCollectionPath || !salesCollectionPath) return;
            
            const mainWarehouse = warehouseList.find(wh => wh.isMain);
            if (!mainWarehouse) {
                 showNotification("Error", "No se ha definido una Bodega Principal para vender.", "error");
                 return;
            }

            if (saleCart.length === 0) {
                showNotification("Error", "El carrito está vacío. Añada productos para vender.", "error");
                return;
            }

            const customerName = saleCustomerName.value.trim();
            const customerId = saleCustomerId.value.trim();
            const customerPhone = saleCustomerPhone.value.trim();
            const customerEmail = saleCustomerEmail.value.trim();

            if (!customerName || !customerId) {
                showNotification("Error", "Por favor, ingrese al menos el Nombre y la Cédula/ID del cliente.", "error");
                return;
            }
            
            const discount = parseFloat(saleDiscountInput.value) || 0;
            const subtotal = saleCart.reduce((acc, item) => acc + (item.price * item.quantity), 0);
            const total = subtotal - discount;

            if (total < 0) {
                showNotification("Error", "El descuento no puede ser mayor que el subtotal.", "error");
                return;
            }

            // Deshabilitar botón para evitar doble envío
            const submitButton = saleForm.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerText = "Procesando...";

            try {
                const batch = writeBatch(db);
                
                // 1. Actualizar el stock en el inventario (Bodega Principal)
                for (const item of saleCart) {
                    const itemRef = doc(db, inventoryCollectionPath, item.id);
                    const newStock = item.maxStock - item.quantity;
                    batch.update(itemRef, { [`stockByWarehouse.${mainWarehouse.id}`]: newStock });
                }

                // 2. Crear el nuevo registro de venta
                const saleCostTotal = saleCart.reduce((acc, item) => acc + (item.cost * item.quantity), 0);
                
                const saleRecord = {
                    customer: {
                        name: customerName,
                        id: customerId,
                        phone: customerPhone,
                        email: customerEmail
                    },
                    items: saleCart.map(item => ({ // Guardar una copia de los items
                        id: item.id,
                        name: item.name,
                        price: item.price,
                        cost: item.cost,
                        quantity: item.quantity
                    })),
                    subtotal: subtotal,
                    discount: discount,
                    total: total,
                    totalCost: saleCostTotal,
                    profit: total - saleCostTotal, // Ganancia basada en el total final
                    soldBy: currentUsername, // Guardar quién vendió
                    createdAt: new Date().toISOString()
                };

                const newSaleRef = doc(collection(db, salesCollectionPath));
                batch.set(newSaleRef, saleRecord);

                await batch.commit();
                
                // Éxito
                closeModal(saleModal);
                showNotification("Éxito", "Venta registrada correctamente.");
                
                // Mostrar Factura
                showInvoice({ ...saleRecord, id: newSaleRef.id });

            } catch (error) {
                console.error("Error al procesar la venta: ", error);
                showNotification("Error", "Error al procesar la venta. Intente de nuevo.", "error");
            } finally {
                // Reactivar botón
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-check-circle mr-2"></i>Confirmar Venta';
            }
        }
        
        /**
         * Muestra el historial de ventas
         */
        function loadSalesHistory() {
            if (!salesCollectionPath) return;

            salesLoading.classList.remove('hidden');
            const q = query(collection(db, salesCollectionPath));

            salesUnsubscribe = onSnapshot(q, (snapshot) => {
                salesLoading.classList.add('hidden');
                salesHistoryList.innerHTML = '';
                
                if (snapshot.empty) {
                    salesHistoryList.innerHTML = `<tr><td colspan="7" class="text-center text-gray-500 py-4">No se han realizado ventas.</td></tr>`;
                    return;
                }
                
                let sales = [];
                snapshot.forEach(doc => {
                    sales.push({ id: doc.id, ...doc.data() });
                });
                
                // Ordenar por fecha (más reciente primero)
                sales.sort((a, b) => b.createdAt.localeCompare(a.createdAt));
                
                renderSalesHistory(sales);

            }, (error) => {
                console.error("Error al cargar historial de ventas: ", error);
                salesLoading.innerText = "Error al cargar historial.";
            });
        }
        
        /**
         * Renderiza la tabla de historial de ventas
         */
        function renderSalesHistory(sales) {
            salesHistoryList.innerHTML = '';
            
            if (sales.length === 0) {
                 salesHistoryList.innerHTML = `<tr><td colspan="7" class="text-center text-gray-500 py-4">No se encontraron ventas.</td></tr>`;
                 return;
            }

            sales.forEach(sale => {
                const row = document.createElement('tr');
                row.className = 'sales-history-row';
                // Guardar datos para búsqueda
                row.dataset.search = `${sale.id} ${sale.customer.name} ${sale.customer.id} ${sale.soldBy}`.toLowerCase();
                
                row.innerHTML = `
                    <td class="py-3 px-4">${formatDate(sale.createdAt)}</td>
                    <td class="py-3 px-4">${sale.id.slice(0, 8).toUpperCase()}</td>
                    <td class="py-3 px-4">${sale.customer.name}</td>
                    <td class="py-3 px-4 text-right">${formatter.format(sale.total)}</td>
                    <td class="py-3 px-4 text-right">${formatter.format(sale.profit)}</td>
                    <td class="py-3 px-4 capitalize">${sale.soldBy}</td>
                    <td class="py-3 px-4 text-center">
                        <button class="view-invoice-btn text-indigo-600 hover:text-indigo-800" data-id="${sale.id}" title="Ver Factura">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                salesHistoryList.appendChild(row);
            });
            
            // Listeners para botones de ver factura
            document.querySelectorAll('.view-invoice-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.closest('button').dataset.id;
                    const saleDoc = await getDoc(doc(db, salesCollectionPath, id));
                    if (saleDoc.exists()) {
                        showInvoice({ id: saleDoc.id, ...saleDoc.data() });
                    }
                });
            });
        }
        
        /**
         * Filtra el historial de ventas
         */
        function filterSalesHistory() {
            const filter = salesSearch.value.toLowerCase();
            document.querySelectorAll('.sales-history-row').forEach(row => {
                if (row.dataset.search.includes(filter)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        /**
         * Muestra la factura de venta
         */
        function showInvoice(saleData) {
            invoiceId.innerText = saleData.id.slice(0, 8).toUpperCase();
            invoiceDate.innerText = formatDate(saleData.createdAt);
            invoiceCustomerName.innerText = saleData.customer.name;
            invoiceCustomerId.innerText = saleData.customer.id;
            invoiceCustomerPhone.innerText = saleData.customer.phone || 'N/A';
            invoiceCustomerEmail.innerText = saleData.customer.email || 'N/A';
            invoiceSeller.innerText = saleData.soldBy;

            invoiceItemsBody.innerHTML = '';
            saleData.items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="py-2 px-2">${item.name}</td>
                    <td class="py-2 px-2 text-right">${formatter.format(item.price)}</td>
                    <td class="py-2 px-2 text-center">${item.quantity}</td>
                    <td class="py-2 px-2 text-right">${formatter.format(item.price * item.quantity)}</td>
                `;
                invoiceItemsBody.appendChild(row);
            });
            
            invoiceSubtotal.innerText = formatter.format(saleData.subtotal);
            invoiceDiscount.innerText = `- ${formatter.format(saleData.discount)}`;
            invoiceTotal.innerText = formatter.format(saleData.total);
            
            openModal(invoiceModal);
        }

        // ===========================================
        // FUNCIONES DE COMPRAS
        // ===========================================
        
        /**
         * Abre el modal de punto de compra.
         */
        function openPurchaseModal() {
            purchaseForm.reset();
            purchaseCart = [];
            purchaseSearchResults.innerHTML = '';
            purchaseSearchResults.classList.add('hidden');
            updatePurchaseCartUI();
            
            // Asegurarse de que las bodegas estén cargadas en el select
            updateWarehouseSelects();
            
            openModal(purchaseModal);
            purchaseSupplierName.focus();
        }

        /**
         * Filtra la lista de productos en el modal de compra
         */
        function filterPurchaseSearch() {
            const filter = purchaseSearchInput.value.toLowerCase().trim();
            
            if (filter.length < 1) {
                purchaseSearchResults.innerHTML = '';
                purchaseSearchResults.classList.add('hidden');
                return;
            }
            
            const results = fullInventoryList.filter(item => 
                item.name.toLowerCase().includes(filter)
            );

            purchaseSearchResults.innerHTML = '';
            if (results.length > 0) {
                results.forEach(item => {
                    const li = document.createElement('li');
                    li.className = "p-2 border-b dark:border-dark-border hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer purchase-search-item";
                    li.innerText = item.name;
                    li.dataset.id = item.id;
                    purchaseSearchResults.appendChild(li);
                });
            } else {
                // Opción para crear nuevo producto
                const createLi = document.createElement('li');
                createLi.className = "p-2 border-b dark:border-dark-border hover:bg-green-100 dark:hover:bg-green-800 text-green-600 dark:text-green-400 cursor-pointer purchase-quick-add";
                createLi.innerHTML = `<i class="fas fa-plus-circle mr-2"></i> Crear nuevo producto: "${filter}"`;
                createLi.dataset.name = filter;
                purchaseSearchResults.appendChild(createLi);
            }
            
            purchaseSearchResults.classList.remove('hidden');
            
            // Listeners para los resultados
            document.querySelectorAll('.purchase-search-item').forEach(item => {
                item.addEventListener('click', (e) => {
                    addProductToPurchaseCart(e.target.dataset.id);
                    purchaseSearchInput.value = '';
                    purchaseSearchResults.classList.add('hidden');
                });
            });
            
            document.querySelector('.purchase-quick-add')?.addEventListener('click', (e) => {
                openQuickAddModal(e.target.dataset.name);
            });
        }
        
        /**
         * Abre el modal de creación rápida de producto
         */
        function openQuickAddModal(name) {
            quickAddForm.reset();
            quickProductName.value = name;
            openModal(quickAddModal);
            quickProductCost.focus();
        }

        /**
         * Maneja la creación rápida de un producto desde el modal de compra
         */
        async function handleQuickAddItem(e) {
            e.preventDefault();
            if (!inventoryCollectionPath) return;

            const name = quickProductName.value.trim();
            const cost = parseFloat(quickProductCost.value);
            const price = parseFloat(quickProductPrice.value);

            if (!name || isNaN(cost) || isNaN(price)) {
                showNotification("Error", "Por favor, rellene todos los campos correctamente.", "error");
                return;
            }

            try {
                // Crear producto con stock 0 en todas las bodegas
                const initialStock = {};
                warehouseList.forEach(wh => {
                    initialStock[wh.id] = 0;
                });
                
                const newDoc = await addDoc(collection(db, inventoryCollectionPath), {
                    name: name,
                    cost: cost,
                    price: price,
                    stockByWarehouse: initialStock
                });
                
                // Éxito
                quickAddForm.reset();
                closeModal(quickAddModal);
                showNotification("Éxito", `Producto "${name}" creado.`);
                
                // Añadirlo directamente al carrito de compra
                addProductToPurchaseCart(newDoc.id, cost);
                purchaseSearchInput.value = '';
                purchaseSearchResults.classList.add('hidden');

            } catch (error) {
                console.error("Error al añadir item rápido: ", error);
                showNotification("Error", "Error al guardar el producto. Intente de nuevo.", "error");
            }
        }

        /**
         * Añade un producto al carrito de compra
         */
        function addProductToPurchaseCart(id, costOverride = null) {
            // Verificar si ya está en el carrito
            const existingItem = purchaseCart.find(item => item.id === id);
            
            if (existingItem) {
                existingItem.quantity++;
            } else {
                // Añadir nuevo item al carrito
                const product = fullInventoryList.find(p => p.id === id);
                if (product) {
                    purchaseCart.push({
                        id: product.id,
                        name: product.name,
                        cost: costOverride !== null ? costOverride : product.cost, // Usar costo de producto o el de creación rápida
                        quantity: 1
                    });
                }
            }
            updatePurchaseCartUI();
        }
        
        /**
         * Actualiza la tabla del carrito de compra y el total
         */
        function updatePurchaseCartUI() {
            purchaseCartBody.innerHTML = '';
            let total = 0;

            if (purchaseCart.length === 0) {
                purchaseCartBody.innerHTML = '<tr><td colspan="5" class="text-center text-gray-500 py-6">El carrito está vacío</td></tr>';
                purchaseTotal.innerText = formatter.format(0);
                return;
            }

            purchaseCart.forEach((item, index) => {
                const itemTotal = item.cost * item.quantity;
                total += itemTotal;
                
                const row = document.createElement('tr');
                row.className = index % 2 === 0 ? 'bg-white dark:bg-dark-card' : 'bg-gray-50 dark:bg-gray-700'; 
                
                row.innerHTML = `
                    <td class="py-2 px-3">${item.name}</td>
                    <td class="py-2 px-3 w-36">
                        <input 
                            type="number" 
                            value="${item.cost}" 
                            min="0" 
                            class="w-32 p-1 border rounded text-right dark:bg-dark-bg dark:border-dark-border purchase-cart-cost" 
                            data-id="${item.id}"
                        >
                    </td>
                    <td class="py-2 px-3 w-32">
                        <input 
                            type="number" 
                            value="${item.quantity}" 
                            min="1" 
                            class="w-20 p-1 border rounded text-center dark:bg-dark-bg dark:border-dark-border purchase-cart-quantity" 
                            data-id="${item.id}"
                        >
                    </td>
                    <td class="py-2 px-3 text-right">${formatter.format(itemTotal)}</td>
                    <td class="py-2 px-3 text-center">
                        <button 
                            type="button" 
                            class="text-red-500 hover:text-red-700 font-bold text-xl purchase-cart-remove" 
                            data-id="${item.id}"
                            title="Quitar"
                        >
                            &times;
                        </button>
                    </td>
                `;
                purchaseCartBody.appendChild(row);
            });
            
            purchaseTotal.innerText = formatter.format(total);

            // Añadir listeners a los inputs y botones del carrito
            document.querySelectorAll('.purchase-cart-cost').forEach(input => {
                input.addEventListener('change', (e) => {
                    const id = e.target.dataset.id;
                    let newCost = parseFloat(e.target.value);
                    const item = purchaseCart.find(i => i.id === id);
                    
                    if (isNaN(newCost) || newCost < 0) {
                        newCost = 0;
                    }
                    
                    item.cost = newCost;
                    e.target.value = newCost;
                    updatePurchaseCartUI();
                });
            });
            
            document.querySelectorAll('.purchase-cart-quantity').forEach(input => {
                input.addEventListener('change', (e) => {
                    const id = e.target.dataset.id;
                    let newQuantity = parseInt(e.target.value);
                    const item = purchaseCart.find(i => i.id === id);
                    
                    if (isNaN(newQuantity) || newQuantity < 1) {
                        newQuantity = 1;
                    }
                    
                    item.quantity = newQuantity;
                    e.target.value = newQuantity;
                    updatePurchaseCartUI();
                });
            });

            document.querySelectorAll('.purchase-cart-remove').forEach(button => {
                button.addEventListener('click', (e) => {
                    const id = e.target.closest('button').dataset.id;
                    purchaseCart = purchaseCart.filter(item => item.id !== id);
                    updatePurchaseCartUI();
                });
            });
        }
        
        /**
         * Procesa la compra final: actualiza stock/costo y guarda el registro
         */
        async function handleProcessPurchase(e) {
            e.preventDefault();
            if (!inventoryCollectionPath || !purchasesCollectionPath) return;
            
            const targetWarehouseId = purchaseWarehouseTarget.value;
            if (!targetWarehouseId) {
                showNotification("Error", "Debe seleccionar una bodega de destino.", "error");
                return;
            }

            if (purchaseCart.length === 0) {
                showNotification("Error", "El carrito de compra está vacío.", "error");
                return;
            }

            const supplierName = purchaseSupplierName.value.trim();
            const supplierId = purchaseSupplierId.value.trim();

            if (!supplierName || !supplierId) {
                showNotification("Error", "Por favor, ingrese los datos del proveedor.", "error");
                return;
            }
            
            const total = purchaseCart.reduce((acc, item) => acc + (item.cost * item.quantity), 0);

            // Deshabilitar botón para evitar doble envío
            const submitButton = purchaseForm.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.innerText = "Procesando...";

            try {
                const batch = writeBatch(db);
                
                // 1. Actualizar el stock y costo en el inventario
                for (const item of purchaseCart) {
                    const itemRef = doc(db, inventoryCollectionPath, item.id);
                    const docSnap = await getDoc(itemRef); // Necesario para obtener stock actual
                    
                    if (docSnap.exists()) {
                        const currentData = docSnap.data();
                        const currentStock = currentData.stockByWarehouse?.[targetWarehouseId] || 0;
                        const newStock = currentStock + item.quantity;
                        
                        // Actualizar stock y el costo principal del producto
                        batch.update(itemRef, { 
                            [`stockByWarehouse.${targetWarehouseId}`]: newStock,
                            cost: item.cost // Actualizar costo principal al de la última compra
                        });
                    }
                }

                // 2. Crear el nuevo registro de compra
                const purchaseRecord = {
                    supplier: {
                        name: supplierName,
                        id: supplierId,
                    },
                    items: purchaseCart, // Ya tiene id, name, cost, quantity
                    total: total,
                    warehouseId: targetWarehouseId,
                    warehouseName: warehouseMap.get(targetWarehouseId),
                    userId: currentUsername,
                    createdAt: new Date().toISOString()
                };

                const newPurchaseRef = doc(collection(db, purchasesCollectionPath));
                batch.set(newPurchaseRef, purchaseRecord);

                await batch.commit();
                
                // Éxito
                closeModal(purchaseModal);
                showNotification("Éxito", "Compra registrada correctamente.");
                
                // Mostrar Recibo
                showPurchaseReceipt({ ...purchaseRecord, id: newPurchaseRef.id });

            } catch (error) {
                console.error("Error al procesar la compra: ", error);
                showNotification("Error", "Error al procesar la compra. Intente de nuevo.", "error");
            } finally {
                // Reactivar botón
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-check-circle mr-2"></i>Confirmar Compra';
            }
        }
        
        /**
         * Muestra el historial de compras
         */
        function loadPurchaseHistory() {
            if (!purchasesCollectionPath) return;

            purchaseLoading.classList.remove('hidden');
            const q = query(collection(db, purchasesCollectionPath));

            purchasesUnsubscribe = onSnapshot(q, (snapshot) => {
                purchaseLoading.classList.add('hidden');
                purchaseHistoryList.innerHTML = '';
                
                if (snapshot.empty) {
                    purchaseHistoryList.innerHTML = `<tr><td colspan="6" class="text-center text-gray-500 py-4">No se han realizado compras.</td></tr>`;
                    return;
                }
                
                let purchases = [];
                snapshot.forEach(doc => {
                    purchases.push({ id: doc.id, ...doc.data() });
                });
                
                // Ordenar por fecha (más reciente primero)
                purchases.sort((a, b) => b.createdAt.localeCompare(a.createdAt));
                
                renderPurchaseHistory(purchases);

            }, (error) => {
                console.error("Error al cargar historial de compras: ", error);
                purchaseLoading.innerText = "Error al cargar historial.";
            });
        }
        
        /**
         * Renderiza la tabla de historial de compras
         */
        function renderPurchaseHistory(purchases) {
            purchaseHistoryList.innerHTML = '';
            
            if (purchases.length === 0) {
                 purchaseHistoryList.innerHTML = `<tr><td colspan="6" class="text-center text-gray-500 py-4">No se encontraron compras.</td></tr>`;
                 return;
            }

            purchases.forEach(p => {
                const row = document.createElement('tr');
                row.className = 'purchase-history-row';
                // Guardar datos para búsqueda
                row.dataset.search = `${p.id} ${p.supplier.name} ${p.supplier.id} ${p.userId}`.toLowerCase();
                
                row.innerHTML = `
                    <td class="py-3 px-4">${formatDate(p.createdAt)}</td>
                    <td class="py-3 px-4">${p.supplier.name}</td>
                    <td class="py-3 px-4">${p.warehouseName}</td>
                    <td class="py-3 px-4 text-right">${formatter.format(p.total)}</td>
                    <td class="py-3 px-4 capitalize">${p.userId}</td>
                    <td class="py-3 px-4 text-center">
                        <button class="view-purchase-receipt-btn text-indigo-600 hover:text-indigo-800" data-id="${p.id}" title="Ver Recibo">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                purchaseHistoryList.appendChild(row);
            });
            
            // Listeners para botones de ver recibo
            document.querySelectorAll('.view-purchase-receipt-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.closest('button').dataset.id;
                    const purchaseDoc = await getDoc(doc(db, purchasesCollectionPath, id));
                    if (purchaseDoc.exists()) {
                        showPurchaseReceipt({ id: purchaseDoc.id, ...purchaseDoc.data() });
                    }
                });
            });
        }

        /**
         * Filtra el historial de compras
         */
        function filterPurchaseHistory() {
            const filter = purchaseSearch.value.toLowerCase();
            document.querySelectorAll('.purchase-history-row').forEach(row => {
                if (row.dataset.search.includes(filter)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
        
        /**
         * Muestra el recibo de compra
         */
        function showPurchaseReceipt(purchaseData) {
            receiptPurchaseId.innerText = purchaseData.id.slice(0, 8).toUpperCase();
            receiptPurchaseDate.innerText = formatDate(purchaseData.createdAt);
            receiptPurchaseSupplierName.innerText = purchaseData.supplier.name;
            receiptPurchaseSupplierId.innerText = `ID/NIT: ${purchaseData.supplier.id}`;
            receiptPurchaseWarehouse.innerText = purchaseData.warehouseName;
            receiptPurchaseUser.innerText = purchaseData.userId;

            receiptPurchaseItemsBody.innerHTML = '';
            purchaseData.items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="py-2 px-2">${item.name}</td>
                    <td class="py-2 px-2 text-right">${formatter.format(item.cost)}</td>
                    <td class="py-2 px-2 text-center">${item.quantity}</td>
                    <td class="py-2 px-2 text-right">${formatter.format(item.cost * item.quantity)}</td>
                `;
                receiptPurchaseItemsBody.appendChild(row);
            });
            
            receiptPurchaseTotal.innerText = formatter.format(purchaseData.total);
            
            openModal(purchaseReceiptModal);
        }

        // ===========================================
        // FUNCIONES DEL DASHBOARD
        // ===========================================

        /**
         * Actualiza las cabeceras de bodega en el dashboard
         */
        function updateDashboardWarehouseHeaders() {
            if (!warehouseHeaderTemplate) return;
            
            // Limpiar cabeceras existentes
            document.querySelectorAll('.warehouse-header').forEach(h => h.remove());
            
            const parent = warehouseHeaderTemplate.parentNode;
            warehouseList.forEach(wh => {
                const th = document.createElement('th');
                th.className = 'py-3 px-4 font-semibold text-gray-600 dark:text-gray-300 text-center warehouse-header';
                th.innerText = wh.name;
                parent.appendChild(th);
            });
        }

        /**
         * Actualiza la tabla de stock por bodega en el dashboard
         */
        function updateDashboardStockTable(products) {
            if (!dashboardStockList) return;
            dashboardStockList.innerHTML = '';
            
            if (products.length === 0) {
                dashboardLoading.innerText = "No hay productos en el inventario.";
                dashboardLoading.classList.remove('hidden');
                return;
            }
            dashboardLoading.classList.add('hidden');

            products.forEach(item => {
                const row = document.createElement('tr');
                row.className = "border-b border-gray-200 dark:border-dark-border";
                
                let rowHtml = `<td class="py-3 px-4 font-medium">${item.name}</td>`;
                
                warehouseList.forEach(wh => {
                    const stock = item.stockByWarehouse?.[wh.id] || 0;
                    rowHtml += `<td class="py-3 px-4 text-center ${stock === 0 ? 'text-gray-400' : ''}">${stock}</td>`;
                });
                
                row.innerHTML = rowHtml;
                dashboardStockList.appendChild(row);
            });
        }
        
        // ===========================================
        // FUNCIONES DE UTILIDAD (MODALES, ETC.)
        // ===========================================
        
        /**
         * Abre un modal y el fondo oscuro
         */
        function openModal(modalElement) {
            if (!modalElement || !modalBackdrop) return;
            modalBackdrop.classList.remove('hidden');
            modalElement.classList.remove('hidden');
        }

        /**
         * Cierra un modal y el fondo oscuro
         */
        function closeModal(modalElement) {
            if (!modalElement || !modalBackdrop) return;
            modalElement.classList.add('hidden');
            
            // Comprobar si hay otros modales abiertos antes de cerrar el fondo
            const anyModalOpen = document.querySelector('.fixed.inset-0.z-50:not(.hidden), .fixed.inset-0.z-\[60\]:not(.hidden), .fixed.inset-0.z-\[70\]:not(.hidden)');
            if (!anyModalOpen) {
                modalBackdrop.classList.add('hidden');
            }
        }
        
        /**
         * Muestra un modal de notificación (reemplazo de alert)
         * @param {'info' | 'success' | 'warn' | 'error'} type
         */
        function showNotification(title, message, type = 'info') {
            if (!alertModal) { // Fallback si el modal no existe
                console.warn("Modal de alerta no encontrado. Usando alert() nativo.");
                alert(`${title}: ${message}`);
                return;
            }
            
            alertModalTitle.innerText = title;
            alertModalText.innerText = message;
            
            // Resetear icono
            alertModalIcon.className = "fas text-5xl mb-4";
            
            switch (type) {
                case 'success':
                    alertModalIcon.classList.add('fa-check-circle', 'text-green-500');
                    break;
                case 'warn':
                    alertModalIcon.classList.add('fa-exclamation-triangle', 'text-yellow-500');
                    break;
                case 'error':
                    alertModalIcon.classList.add('fa-times-circle', 'text-red-500');
                    break;
                case 'info':
                default:
                    alertModalIcon.classList.add('fa-info-circle', 'text-blue-500');
                    break;
            }
            
            openModal(alertModal);
        }
        
        /**
         * Formatea una fecha ISO a un string legible
         */
        function formatDate(isoString) {
            if (!isoString) return 'N/A';
            try {
                const date = new Date(isoString);
                return date.toLocaleString('es-CO', { 
                    year: 'numeric', 
                    month: '2-digit', 
                    day: '2-digit', 
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: true 
                });
            } catch (e) {
                return isoString;
            }
        }

        // ===========================================
        // FUNCIONES DE MODO OSCURO
        // ===========================================

        /**
         * Inicializa el estado del modo oscuro al cargar la página
         */
        function initDarkMode() {
            if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
                if (darkModeIcon) {
                    darkModeIcon.classList.remove('fa-moon');
                    darkModeIcon.classList.add('fa-sun');
                }
            } else {
                document.documentElement.classList.remove('dark');
                if (darkModeIcon) {
                    darkModeIcon.classList.add('fa-moon');
                    darkModeIcon.classList.remove('fa-sun');
                }
            }
        }

        /**
         * Cambia entre modo claro y oscuro
         */
        function toggleDarkMode() {
            if (document.documentElement.classList.contains('dark')) {
                // Cambiar a claro
                document.documentElement.classList.remove('dark');
                localStorage.theme = 'light';
                if (darkModeIcon) {
                    darkModeIcon.classList.add('fa-moon');
                    darkModeIcon.classList.remove('fa-sun');
                }
            } else {
                // Cambiar a oscuro
                document.documentElement.classList.add('dark');
                localStorage.theme = 'dark';
                if (darkModeIcon) {
                    darkModeIcon.classList.remove('fa-moon');
                    darkModeIcon.classList.add('fa-sun');
                }
            }
        }

    </script>
</body>
</html>

